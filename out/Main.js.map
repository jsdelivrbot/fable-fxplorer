{"version":3,"sources":["..\\Main.fs"],"names":[],"mappings":";;;;;;;;;;;;;;AAWK;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACD,OAAuC;AAAA;AAAgB;AAEtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAED,sBAAa,mBAAb;AACA,oBAAW,mBAAX;AAEA,qBAAY,mBAAZ;AAEA,2BAAkB,iBAAU,WAAV,CAAlB;AAEA;AACA;AAEA;AAZO;;AAAN;AAAA;AAAA,oCAmBO;AAAoB,8CAA0B;AAAA;AAAA,aAA1B;AAApB;AAAK;AAnBZ;AAAA;AAAA,iCAwBK;AAAO,2BAAiB;AAAA;AAAA;AAAA;AAAA,cAAsB;AAAA;AAAA,aAAtB,eAAjB;AAAP;AAES,8CAAqB,+BAArB,EAAmC,yBAAnC;AAFT,sBAGM,0BA7BO,2BA6BP,CAHN;AAAI;AAxBT;AAAA;AAAA,8BA8BO;AAAA;AACE;;AAAA,4CAEF;AAAA,iCAAiB,MAAO,wBAAqB,wBAArB,CAAP,EAAgD,wBAAqB,wBAArB,CAAhD,CAAjB;AACA,qCAAsB,2BAAtB;AAAgD;AAJ/C;AA9BR;AAAA;AAAA,8BAsCO;AAAA;AAAA;;AAEG,gBACW,iBAAD,GAAc,kBAAd,QADV,EACqC;AAAA,2BAAW,mBAAX;AAAmB,aADxD,UAEW,iBAFX,EAEwB;AAAA,2BAAW,mBAAX;AAAmB,aAF3C,UAGW,iBAAD,GAAc,iBAAd,QAHV,EAGoC;AAAA,2BAAW,mBAAX;AAAmB,aAHvD,UAIW,iBAAD,GAAc,mBAAd,QAJV,EAIoC;AAAA,2BAAW,mBAAX;AAAkB;AANxD;AAtCR;AAAA;AAAA,2BAiDG;AAAA;AAAqB;AAjDxB;AAAA;AAAA,8BAoDO;AAAA;AACJ,iCAAsB,2BAAtB;AADK;AApDR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA4DD,OAGI;AAAc,sBAAQ,6CAAR;AAAA;AAAA;AAkOY,2CAjON,aAAK,UAAL,CAiOM,EAjOG,YAiOH;AA/EL,gCAjJZ,aAAK,SAAC,YAAI,wFAAJ,CAAD,EAAL,CAiJY,EA/Ib,kBA+Ia;AAnJrB;AAAW;AAMX,OACE;AAAA;;AAAA,uCAEU;AAAA;AAA2B,KAFrC,MA4ImB;AAAA,yCA3IuD,OAApD,yBAAqB;AAAA;AAAA,SAArB,CAAoD,CA2IvD;AAAc;AA5IxB;AAMf,OACI;AAqIqB,mCApIhB,aAAK,SAwOe,6BAxOO;AAAA;AAAe,KAwOtB,CAxOf,EAkOiB,+BAjOH;AAAA;AAAe,KAiOZ,CAlOjB,EAqOiB,+BAnOH;AAAA;AAAU,KAmOP,CArOjB,EAGE,yBACI;AAAA;AACA;AAAa,KAFjB,CAHF,EAAL,CAoIgB,EA9HuD,OAApD,kBAAqB;AAAA;AAAA,KAArB,CAAoD,CA8HvD;AAAA,qCA7HP,aAAK,SAAC,YAAI,wEAAJ,CAAD,EAAL,CA6HO,EA7HgE,eA6HhE;AArIrB;AAAI;AAcR,OACI;AAAA,iBAAY,eAAc,kCAAd,EAA+B,yBAA/B,CAAZ,EACY,cAAa,+BAAb,EAA2B,yBAA3B,CADZ,EAEY,cAAa,iCAAb,EAA6B,yBAA7B,CAFZ;AAIS,mCAAa;AAAA;AAAA,MAAb;;AAJT;AAAA;AAAA;;AAMM,2CAAoB;AAAA;AAAA,KAApB;AANN;AAAK;AASb,6BAAoB,cAApB","file":"Main.js","sourcesContent":["ï»¿module UILogic\r\n\r\nopen System.Collections.Generic\r\nopen System\r\nopen Fable.Import.Mithril\r\nopen Fable.Import.MithrilBase\r\nopen Fable.Import.Browser\r\nopen Fable.Core.JsInterop\r\nopen Types\r\nopen TreeLogic\r\n \r\ntype Point = {x :float; y :float} \r\nlet point (_x :float) (_y :float) :Point = {x = _x; y = _y} \r\n\r\ntype Engine(t,c) =\r\n\r\n    let config = property c\r\n    let tree = property t\r\n\r\n    let scale = property 0.0\r\n\r\n    let translation = property (point 0.0 0.0)\r\n\r\n    let mutable lastDragPoint = None\r\n    let mutable lastMousePositionOnTarget = None\r\n\r\n    let mutable lastCenterPositionOnTarget = None\r\n\r\n    member this.Tree = tree\r\n\r\n    member this.Config= config\r\n\r\n    member this.Resize key size =\r\n        let index = tree.get |> Array.findIndex (fun x -> x.key = key)\r\n        tree.get.[index].size.set size\r\n\r\n   \r\n    member this.Add parent =\r\n      let nkey = 1 + (tree.get |> Array.maxBy (fun x -> x.key)).key\r\n      let name = \"new.txt\"\r\n      let nnode = (newNode nkey parent (TextBox name) TLeaf)\r\n      tree.set (calc_leafs config.get (tree.get |+| [|nnode|]))\r\n\r\n    member this.Pan (evt :Event)  =\r\n        let e = (evt :?> MouseEvent)\r\n        match lastDragPoint with\r\n        | Some(dp) -> \r\n            translation.set (point (translation.get.x + (e.clientX - dp.x)) (translation.get.y + (e.clientY - dp.y)))\r\n            lastDragPoint <- Some(point e.clientX e.clientY)\r\n        | None -> ()\r\n\r\n    member this.Zoom (evt :Event)  =\r\n        let e = (evt :?> MouseWheelEvent)\r\n        //lastMousePositionOnTarget <- Some(childpos)\r\n        match (e.wheelDelta,scale.get) with //user logmerithic scaling\r\n            | (d,s) when (d > 0.0) && (s >= 1.0) -> scale.set (s + 0.5)\r\n            | (d,s) when (d > 0.0)  -> scale.set (s + 0.1)\r\n            | (d,s) when (d < 0.0) && (s > 1.0) -> scale.set (s - 0.5)\r\n            | (d,s) when (d < 0.0) && (s > 0.1) -> scale.set (s- 0.1)\r\n            | (_,_) -> ()\r\n        //lastCenterPositionOnTarget <- Some(tp)\r\n\r\n    member this.EndPan ()  =\r\n        lastDragPoint <- None\r\n\r\n    member this.StartPan (evt :Event)  =\r\n        let e = (evt :?> MouseEvent)\r\n        lastDragPoint <- Some(point e.clientX e.clientY)\r\n\r\n\r\n    interface Controller with\r\n        member x.onunload evt = () :> obj\r\n\r\n\r\nlet createTextBoxELM (n :Node) (f :string) (engine :Engine) =\r\n    //resize event\r\n    //context menu or button for add\r\n    let translation = sprintf \"translate(%fpx,%fpx) scale(%f,%f)\" (fst n.position.get) (snd n.position.get) n.scale.get n.scale.get\r\n    let textbox = textarea (attr []) [f]\r\n    let v = div (attr [css [(\"-web-kit-transfrom-origin\",translation);\r\n                            (\"transform-origin\", translation)]]) \r\n                [textbox]\r\n    v\r\nlet rec createELM (n :Node) (engine :Engine) =\r\n    match n.element with\r\n    | Tree(t) -> div None (t |> Array.map (fun x -> (createELM x engine) :> obj) |> Array.toList)\r\n    | TextBox(f) -> createTextBoxELM n f engine\r\n\r\n\r\n//TREE\r\nlet createTreeView (engine :Engine) =\r\n    let root = \r\n        div (attr [ onMouseUp (fun e -> engine.EndPan() );\r\n                    onMouseDown engine.StartPan;\r\n                    onMouseMove engine.Pan; \r\n                    onEvent \"wheel\" (fun e -> \r\n                        e.preventDefault(); \r\n                        engine.Zoom e)])\r\n            (engine.Tree.get |> Array.map (fun x -> (createELM x engine) :> obj) |> Array.toList)\r\n    let origin = div (attr [css [(\"position\",\"relative\");(\"width\",\"0px\");(\"height\",\"0px\")]]) [root]\r\n    origin\r\n\r\n    \r\n\r\n//WINDOW\r\nlet createWindow () =\r\n    let orgin = [| (newNode 0 -1 (TextBox \"Hello\") TRoot)\r\n                   (newNode 1 0 (TextBox \"Hi\") TLeaf)\r\n                   (newNode 2 0 (TextBox \"test\") TLeaf)\r\n                |] \r\n    let engine = Engine(orgin,{div_tree_threshold=10; parent_to_children_scaling=0.5; ar_scaleing=1.0; sort=(fun x -> x)})\r\n    let vminit x = engine\r\n    let com = newComponent vminit createTreeView\r\n    com\r\n\r\nmount(document.body,createWindow()) |> ignore"]}