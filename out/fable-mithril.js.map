{"version":3,"sources":["..\\fable-mithril.fs"],"names":[],"mappings":";;;;;;;;;;AAsJK;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGE;AAGC;;AAEC,+DACD;AAAA,YAAG,aAAH;AAAA;AAAA;AAES,KAHR;;AAKD,gCACY;AAMgB,2BANA,OAA4B;AAAA;AAAA;AAAA;AAAC,aAAD;AAEF;;AAAA,oBAFE,6BAEF,EAFE;AAAA;AAAA;AAAC,iBAEH,MAFE;AAAA;AAAA;AAAC;AAAA;AAAA,SAA7B,WAMA;AACJ;AAPZ;AAAC,KADb;;AAVD;AAAA,2BAyBiC;AAAA;AAAC,SAzBlC;AAAA;;AA8QC,gCACI;AAAI;AAAJ;AAAA;AAAA;;AAAA;AACJ,iKACU;AAAA;;AAAA;AADG;;AAEY,wBAAG,yBAAH,EAAoB;AAAA;AAAuB,qBAA3C,MAAiD;AAAA;AAAc;AAD7E,iBAAD,MAEC;AAAA;AAAc;AAFd;AAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAC,KADL;;AAWA,kCACI;AAAqB;AAAA;AAAA;;AAArB,qBACM,cAAkC;AAAA;AAAA,SAAlC,CADN;AAAC,KADL;;AAIA,wCACI;AAAqB;AAAA;AAAA;;AACjB,gCAAoC;AAAA;AAAA,SAApC;AACE;AAAA;AAAW,SAAX;AAFL,KADL;;AA7RD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwSC,8BACI;AAAI;AAAJ;AAAA;AAAA;;AAAA;AACJ,uKACI;AAAA;AAAA;AAAc;AAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAC,KADL;;AAMA,gDACI;AAAI;;AACR,uBAA0B;AAAA;AAAA,SAA1B;;AACA;AAFI;AAAC,KADL;;AAQA,kCACA;AAAA;AAA6B,KAD7B;;AAGA,wCACA;AAAA;AAA0B,KAD1B;;AAGA,gCACA;AAAA;AAA4B,KAD5B;;AAGA,oDACA;AAAA;AAAgC,KADhC;;AAMA,kCACA;AAAA;AAAA;AAAA;AAAe,SAAf;AAAe,KADf;;AAGA,sCACA;AAAA;AAAqB,KADrB;;AAKA,0CACA;AAAA;AAAkC,KADlC;;AAGA,gDACA;AAAA;AAAsC,KADtC;;AAGA,oCACA;AAAA;AAAyB,KADzB;;AAGA,kCACA;AAAA;AAAoB,KADpB;;AAGA,oDACA;AAAA;AAAkC,KADlC;;AAGA,oCACA;AAAA;AAA+B,KAD/B;;AAGA,8CACA;AAAA;AAAqC,KADrC;;AAGA,8CACA;AAAA;AAAqB,KADrB;;AAGA,4CACA;AAAA;AAAqB,KADrB;;AAGA,gCACA;AAAA;AAAuB,KADvB;;AAGA,wDACA;AAAA;AAA4B,KAD5B;;AAGA,oDACA;AAAA;AAA0B,KAD1B;;AA9WD;AA8We,CA9Wf","file":"fable-mithril.js","sourcesContent":["namespace Fable.Import\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import.JS\r\nopen Fable.Import.Browser\r\n\r\nmodule MithrilBase =\r\n\r\n    [<Erase>]\r\n    type Children =\r\n    | Child of obj\r\n    | Array of ResizeArray<obj>\r\n\r\n    [<Erase>]   \r\n    type Child =\r\n    | String of string\r\n    | Element of VirtualElement\r\n    | Component of Component<Controller>\r\n\r\n    and Static =\r\n        abstract redraw: Redraw with get\r\n        abstract route: Node * string * obj -> unit\r\n        abstract route: Node -> unit\r\n        abstract route: path: string * ?prms: obj * ?replaceHistory: bool-> unit\r\n        abstract route: unit -> string\r\n       // abstract route: Route with get, set\r\n        abstract deferred: obj with get, set\r\n        [<Emit(\"$0($1...)\")>] abstract Invoke: selector: string * [<ParamArray>] children: Children[] -> VirtualElement\r\n        [<Emit(\"$0($1...)\")>] abstract Invoke: selector: string * attributes: Attributes * [<ParamArray>] children: Children[] -> VirtualElement\r\n        [<Emit(\"$0($1...)\")>] abstract Invoke: ``component``: Component<'T> * [<ParamArray>] args: obj[] -> Component<'T>\r\n        abstract prop: promise: Thennable<'T> -> Promise<'T>\r\n        abstract prop: value: 'T -> BasicProperty<'T>\r\n        abstract prop: unit -> BasicProperty<'T>\r\n        abstract withAttr: property: string * callback: Func<obj, obj> * ?callbackThis: obj -> Func<Event, unit>\r\n        abstract ``module``: rootElement: Node * ``component``: Component<'T> -> 'T\r\n        abstract mount: rootElement: Node * ``component``: Component<'T> -> 'T\r\n        abstract ``component``: ``component``: Component<'T> * [<ParamArray>] args: obj[] -> Component<'T>\r\n        abstract trust: html: string -> string\r\n        abstract render: rootElement: Element * children: U2<VirtualElement, ResizeArray<VirtualElement>> * ?forceRecreation: bool -> unit\r\n        abstract request: options: XHROptions -> Promise<obj>\r\n        abstract request: options: JSONPOptions -> Promise<obj>\r\n        abstract sync: promises: ResizeArray<Thennable<'T>> -> Promise<ResizeArray<'T>>\r\n        abstract startComputation: unit -> unit\r\n        abstract endComputation: unit -> unit\r\n        abstract deps: mockWindow: Window -> Window\r\n\r\n    and Route =\r\n        abstract mode: string with get, set\r\n        abstract param: string -> string\r\n        abstract buildQueryString: obj -> string\r\n        abstract parseQueryString: string -> obj\r\n\r\n    and VirtualElement =\r\n        abstract tag: string with get, set\r\n        abstract attrs: Attributes with get, set\r\n        abstract children: ResizeArray<Children> with get, set\r\n\r\n    // and Event =\r\n    //     abstract preventDefault: unit -> unit\r\n\r\n    and Context =\r\n        abstract retain: bool option with get, set\r\n        abstract onunload: unit -> obj\r\n\r\n    and ElementConfig =\r\n        [<Emit(\"$0($1...)\")>] abstract Invoke: element: Element * isInitialized: bool * context: Context * vdom: VirtualElement -> unit\r\n\r\n    and Attributes =\r\n        abstract className: string option with get, set\r\n        abstract ``class``: string option with get, set\r\n        abstract config: ElementConfig option with get, set\r\n        abstract key: U2<string, float> option with get, set\r\n        [<Emit(\"$0[$1]{{=$2}}\")>] abstract Item: property: string -> obj with get, set\r\n       \r\n\r\n    and Controller =\r\n        abstract onunload: evt: Event -> obj\r\n\r\n    and Component<'T> =\r\n        abstract controller: [<ParamArray>] args: obj[] -> 'T \r\n        abstract view: ctrl: 'T * [<ParamArray>] args: obj[] -> VirtualElement\r\n\r\n    and Property<'T> =\r\n        [<Emit(\"$0()\")>] abstract get: 'T\r\n        [<Emit(\"$0($1...)\")>] abstract set: value: 'T -> unit\r\n\r\n    and BasicProperty<'T> =\r\n        inherit Property<'T>\r\n        abstract toJSON: unit -> 'T\r\n\r\n    and Routes =\r\n        [<Emit(\"$0[$1]{{=$2}}\")>] abstract Item: key: string -> Component<Controller> with get, set\r\n\r\n    and Deferred<'T> =\r\n        abstract promise: Promise<'T> with get, set\r\n        abstract resolve: ?value: 'T -> unit\r\n        abstract reject: ?reason: obj -> unit\r\n\r\n    and SuccessCallback<'T, 'U> =\r\n        [<Emit(\"$0($1...)\")>] abstract Invoke: value: 'T -> U2<'U, Thennable<'U>>\r\n\r\n    and ErrorCallback<'T> =\r\n        [<Emit(\"$0($1...)\")>] abstract Invoke: value: Error -> U2<'T, Thennable<'T>>\r\n\r\n    and Thennable<'T> =\r\n        abstract ``then``: success: SuccessCallback<'T, 'U> -> Thennable<'U>\r\n        abstract ``then``: success: SuccessCallback<'T, 'U> * error: ErrorCallback<'V> -> Thennable<U2<'U, 'V>>\r\n        abstract catch: error: ErrorCallback<'T> -> Thennable<'T>\r\n        abstract catch: error: ErrorCallback<'U> -> Thennable<U2<'T, 'U>>\r\n\r\n    and Promise<'T> =\r\n        inherit Thennable<'T>\r\n        inherit Property<U2<'T, Promise<'T>>>\r\n        abstract ``then``: success: SuccessCallback<'T, 'U> -> Promise<'U>\r\n        abstract ``then``: success: SuccessCallback<'T, 'U> * error: ErrorCallback<'V> -> Promise<U2<'U, 'V>>\r\n        abstract catch: error: ErrorCallback<'U> -> Promise<U2<'T, 'U>>\r\n\r\n    and RequestOptions =\r\n        abstract data: obj option with get, set\r\n        abstract background: bool option with get, set\r\n        abstract initialValue: obj option with get, set\r\n        abstract ``type``: obj option with get, set\r\n        abstract url: string with get, set\r\n        abstract unwrapSuccess: data: obj -> obj\r\n        abstract unwrapError: data: obj -> obj\r\n        abstract serialize: dataToSerialize: obj -> string\r\n        abstract deserialize: dataToDeserialize: string -> obj\r\n        abstract extract: xhr: XMLHttpRequest * options: obj -> string\r\n\r\n    and JSONPOptions =\r\n        inherit RequestOptions\r\n        abstract dataType: obj with get, set\r\n        abstract callbackKey: string option with get, set\r\n        abstract data: obj option with get, set\r\n\r\n    and XHROptions =\r\n        inherit RequestOptions\r\n        abstract ``method``: (* TODO StringEnum GET | POST | PUT | DELETE | HEAD | OPTIONS *) string with get, set\r\n        abstract user: string option with get, set\r\n        abstract password: string option with get, set\r\n        abstract data: obj option with get, set\r\n        abstract config: xhr: XMLHttpRequest * options: obj -> obj\r\n\r\n    and Redraw =\r\n        [<Emit(\"$0(true)\")>] abstract redraw: unit -> unit\r\n        [<Emit(\"$0.strategy($1)\")>] abstract set_strategy: string -> unit\r\n        [<Emit(\"$0.strategy()\")>] abstract get_strategy: unit -> string\r\n\r\ntype Globals =\r\n    [<Global>] static member m with get(): MithrilBase.Static = failwith \"JS only\" and set(v: MithrilBase.Static): unit = failwith \"JS only\"\r\n\r\nmodule Mithril =\r\n    open MithrilBase\r\n\r\n    let m = Fable.Import.Node.require.Invoke(\"mithril\") //dirty hack\r\n\r\n    let (|VirtualElement|_|) (o: obj) =\r\n        if (box o?tag) <> null\r\n        then unbox<VirtualElement> o |> Some\r\n        else None \r\n\r\n    let elem (tagName :string) (attr :Attributes option) (children :obj list) :VirtualElement = \r\n                let c = children |> List.choose (fun x -> match x with\r\n                                                            | :? string as s -> Some (Child (String s))\r\n                                                            | VirtualElement v -> Some (Child v )\r\n                                                            | :? Component<Controller> as c -> Some (Child c )\r\n                                                            // | :? Seq<VirtualElement> as r -> r |> Seq.map (fun x -> x :> obj) |> ResizeArray<obj> |> Array |> Some\r\n                                                            | _ -> None) \r\n                                 |> List.toArray\r\n                let ve =  match attr with\r\n                            | Some(a) -> Globals.m.Invoke(selector = tagName, attributes = a,children = c)\r\n                            | None -> Globals.m.Invoke(selector = tagName,children = c)\r\n\r\n                ve \r\n\r\n    let onEvent (eventType :string) (f :Event -> unit) :string*obj = \r\n            (eventType, Func<Event,unit>f :> obj)\r\n\r\n\r\n    [<AutoOpen>]\r\n    module VirtualDOM =\r\n         \r\n\r\n        // Elements - list of ELEM.elements here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\n        // Void ELEM.elements\r\n        let inline br a b = elem \"br\" a b\r\n        let inline area a b = elem \"area\" a b\r\n        let inline baseHtml a b = elem \"base\" a b\r\n        let inline col a b = elem \"col\" a b\r\n        let inline embed a b = elem \"embed\" a b\r\n        let inline hr a b = elem \"hr\" a b\r\n        let inline img a b = elem \"img\" a b\r\n        let inline input a b = elem \"input\" a b\r\n        let inline link a b = elem \"link\" a b\r\n        let inline meta a b = elem \"meta\" a b\r\n        let inline param a b = elem \"param\" a b\r\n        let inline source a b = elem \"source\" a b\r\n        let inline track a b = elem \"track\" a b\r\n        let inline wbr a b = elem \"wbr\" a b\r\n\r\n        // Metadata\r\n        let inline head a b = elem \"head\" a b\r\n        let inline style a b = elem \"style\" a b\r\n        let inline title a b = elem \"title\" a b\r\n\r\n        // Content sectioning\r\n        let inline address a b = elem \"address\" a b\r\n        let inline article a b = elem \"article\" a b\r\n        let inline aside a b = elem \"aside\" a b\r\n        let inline footer a b = elem \"footer\" a b\r\n        let inline header a b = elem \"header\" a b\r\n        let inline h1 a b = elem \"h1\" a b\r\n        let inline h2 a b = elem \"h2\" a b\r\n        let inline h3 a b = elem \"h3\" a b\r\n        let inline h4 a b = elem \"h4\" a b\r\n        let inline h5 a b = elem \"h5\" a b\r\n        let inline h6 a b = elem \"h6\" a b\r\n        let inline hgroup a b = elem \"hgroup\" a b\r\n        let inline nav a b = elem \"nav\" a b\r\n\r\n        // Text content\r\n        let inline dd a b = elem \"ddr\" a b\r\n        let inline div a b = elem \"div\" a b\r\n        let inline dl a b = elem \"dl\" a b\r\n        let inline dt a b = elem \"dt\" a b\r\n        let inline figcaption a b = elem \"figcaption\" a b\r\n        let inline figure a b = elem \"figure\" a b\r\n        let inline li a b = elem \"li\" a b\r\n        let inline main a b = elem \"main\" a b\r\n        let inline ol a b = elem \"ol\" a b\r\n        let inline p a b = elem \"p\" a b\r\n        let inline pre a b = elem \"pre\" a b\r\n        let inline section a b = elem \"section\" a b\r\n        let inline ul a b = elem \"ul\" a b\r\n\r\n        // Inline text semantics\r\n        let inline a a b = elem \"a\" a b\r\n        let inline abbr a b = elem \"abbr\" a b\r\n        let inline b a b = elem \"b\" a b\r\n        let inline bdi a b = elem \"bdi\" a b\r\n        let inline bdo a b = elem \"bdo\" a b\r\n        let inline cite a b = elem \"cite\" a b\r\n        let inline code a b = elem \"code\" a b\r\n        let inline data a b = elem \"data\" a b\r\n        let inline dfn a b = elem \"dfn\" a b\r\n        let inline em a b = elem \"em\" a b\r\n        let inline i a b = elem \"i\" a b\r\n        let inline kbd a b = elem \"kbd\" a b\r\n        let inline mark a b = elem \"mark\" a b\r\n        let inline q a b = elem \"q\" a b\r\n        let inline rp a b = elem \"rp\" a b\r\n        let inline rt a b = elem \"rt\" a b\r\n        let inline rtc a b = elem \"rtc\" a b\r\n        let inline ruby a b = elem \"ruby\" a b\r\n        let inline s a b = elem \"s\" a b\r\n        let inline samp a b = elem \"samp\" a b\r\n        let inline small a b = elem \"small\" a b\r\n        let inline span a b = elem \"span\" a b\r\n        let inline strong a b = elem \"strong\" a b\r\n        let inline sub a b = elem \"sub\" a b\r\n        let inline sup a b = elem \"sup\" a b\r\n        let inline time a b = elem \"time\" a b\r\n        let inline u a b = elem \"u\" a b\r\n        let inline var a b = elem \"var\" a b\r\n\r\n        // Image and multimedia\r\n        let inline audio a b = elem \"audio\" a b\r\n        let inline map a b = elem \"map\" a b\r\n        let inline video a b = elem \"video\" a b\r\n\r\n        // Embedded content\r\n        let inline objectHtml a b = elem \"object\" a b\r\n\r\n        // Demarcasting edits\r\n        let inline del a b = elem \"del\" a b\r\n        let inline ins a b = elem \"ins\" a b\r\n\r\n        // Table content\r\n        let inline caption a b = elem \"caption\" a b\r\n        let inline colgroup a b = elem \"colgroup\" a b\r\n        let inline table a b = elem \"table\" a b\r\n        let inline tbody a b = elem \"tbody\" a b\r\n        let inline td a b = elem \"td\" a b\r\n        let inline tfoot a b = elem \"tfoot\" a b\r\n        let inline th a b = elem \"th\" a b\r\n        let inline thead a b = elem \"thead\" a b\r\n        let inline tr a b = elem \"tr\" a b\r\n\r\n        // Forms\r\n        let inline button a b = elem \"button\" a b\r\n        let inline datalist a b = elem \"datalist\" a b\r\n        let inline fieldset a b = elem \"fieldset\" a b\r\n        let inline form a b = elem \"form\" a b\r\n        let inline label a b = elem \"label\" a b\r\n        let inline legend a b = elem \"legend\" a b\r\n        let inline meter a b = elem \"meter\" a b\r\n        let inline optgroup a b = elem \"optgroup\" a b\r\n        let inline option a b = elem \"option\" a b\r\n        let inline output a b = elem \"output\" a b\r\n        let inline progress a b = elem \"progress\" a b\r\n        let inline select a b = elem \"select\" a b\r\n        let inline textarea a b = elem \"textarea\" a b\r\n\r\n        // Interactive ELEM.elements\r\n        let inline details a b = elem \"details\" a b\r\n        let inline dialog a b = elem \"dialog\" a b\r\n        let inline menu a b = elem \"menu\" a b\r\n        let inline menuitem a b = elem \"menuitem\" a b\r\n        let inline summary a b = elem \"summary\" a b\r\n\r\n    [<AutoOpen>]\r\n    module Events =\r\n\r\n        let inline onClick x = onEvent \"onclick\" x\r\n        let inline onContextMenu x = onEvent \"oncontextmenu\" x\r\n        let inline onDblClick x = onEvent \"ondblclick\" x\r\n        let inline onMouseDown x = onEvent \"onmousedown\" x\r\n        let inline onMouseEnter x = onEvent \"onmouseenter\" x\r\n        let inline onMouseLeave x = onEvent \"onmouseleave\" x\r\n        let inline onMouseMove x = onEvent \"onmousemove\" x\r\n        let inline onMouseOut x = onEvent \"onmouseout\" x\r\n        let inline onMouseOver x = onEvent \"onmouseover\" x\r\n        let inline onMouseUp x = onEvent \"onmouseup\" x\r\n        let inline onShow x = onEvent \"onshow\" x\r\n\r\n        let inline onKeydown x = onEvent \"onkeydown\" x\r\n        let inline onKeypress x = onEvent \"onkeypress\" x\r\n        let inline onKeyup x = onEvent \"onkeyup\" x\r\n\r\n\r\n        let inline onAbort x = onEvent \"onabort\" x\r\n        let inline onAfterPrint x = onEvent \"onafterprint\" x\r\n        let inline onAudioEnd x = onEvent \"onaudioend\" x\r\n        let inline onAudioStart x = onEvent \"onaudiostart\" x \r\n        let inline onBeforePrint x = onEvent \"onbeforeprint\" x\r\n        let inline onCached x = onEvent \"oncached\" x\r\n        let inline onCanPlay x = onEvent \"oncanplay\" x\r\n        let inline onCanPlayThrough x = onEvent \"oncanplaythrough\" x\r\n        let inline onChange x = onEvent \"onchange\" x\r\n        let inline onChargingChange x = onEvent \"onchargingchange\" x\r\n        let inline onChargingTimeChange x = onEvent \"onchargingtimechange\" x\r\n        let inline onChecking x = onEvent \"onchecking\" x\r\n        let inline onClose x = onEvent \"onclose\" x\r\n        let inline onDischargingTimeChange x = onEvent \"ondischargingtimechange\" x\r\n        let inline onDOMContentLoaded x = onEvent \"onDOMContentLoaded\" x\r\n        let inline onDownloading x = onEvent \"ondownloading\" x\r\n        let inline onDurationchange x = onEvent \"ondurationchange\" x\r\n        let inline onEmptied x = onEvent \"onemptied\" x\r\n        let inline onEnd x = onEvent \"onend\" x\r\n        let inline onEnded x = onEvent \"onended\" x\r\n        let inline onError x = onEvent \"onerror\" x\r\n        let inline onCullScreenChange x = onEvent \"onfullscreenchange\" x\r\n        let inline onCullScreenError x = onEvent \"onfullscreenerror\" x\r\n        let inline onInput x = onEvent \"oninput\" x\r\n        let inline onInvalid x = onEvent \"oninvalid\" x\r\n        let inline onLanguageChange x = onEvent \"onlanguagechange\" x\r\n        let inline onLevelChange x = onEvent \"onlevelchange\" x\r\n        let inline onLoadedData x = onEvent \"onloadeddata\" x\r\n        let inline onLoadedMetaData x = onEvent \"onloadedmetadata\" x\r\n        let inline onNoUpdate x = onEvent \"onnoupdate\" x\r\n        let inline onObsolete x = onEvent \"onobsolete\" x\r\n        let inline onOffline x = onEvent \"onoffline\" x\r\n        let inline onOnline x = onEvent \"ononline\" x\r\n        let inline onOpen x = onEvent \"onopen\" x\r\n        let inline onOrientationChange x = onEvent \"onorientationchange\" x\r\n        let inline onPause x = onEvent \"onpause\" x\r\n        let inline onPointerlockchange x = onEvent \"onpointerlockchange\" x\r\n        let inline onPointerlockerror x = onEvent \"onpointerlockerror\" x\r\n        let inline onPlay x = onEvent \"onplay\" x\r\n        let inline onPlaying x = onEvent \"onplaying\" x\r\n        let inline onRateChange x = onEvent \"onratechange\" x\r\n        let inline onReadyStateChange x = onEvent \"onreadystatechange\" x\r\n        let inline onReset x = onEvent \"onreset\" x\r\n        let inline onSeeked x = onEvent \"onseeked\" x\r\n        let inline onSeeking x = onEvent \"onseeking\" x\r\n        let inline onSelectStart x = onEvent \"onselectstart\" x\r\n        let inline onSelectionChange x = onEvent \"onselectionchange\" x\r\n        let inline onSoundEnd x = onEvent \"onsoundend\" x\r\n        let inline onSoundStart x = onEvent \"onsoundstart\" x\r\n        let inline onSpeechEnd x = onEvent \"onspeechend\" x\r\n        let inline onSpeechStart x = onEvent \"onspeechstart\" x\r\n        let inline onStalled x = onEvent \"onstalled\" x\r\n        let inline onStart x = onEvent \"onstart\" x\r\n        let inline onSubmit x = onEvent \"onsubmit\" x\r\n        let inline onSuccess x = onEvent \"onsuccess\" x\r\n        let inline onSuspend x = onEvent \"onsuspend\" x\r\n        let inline onTimeUpdate x = onEvent \"ontimeupdate\" x\r\n        let inline onUpdateReady x = onEvent \"onupdateready\" x\r\n        let inline onVoicesChanged x = onEvent \"onvoiceschanged\" x\r\n        let inline onVisibilityChange x = onEvent \"onvisibilitychange\" x\r\n        let inline onVolumeChange x = onEvent \"onvolumechange\" x\r\n        let inline onVrdisplayConnected x = onEvent \"onvrdisplayconnected\" x\r\n        let inline onVrdisplayDisconnected x = onEvent \"onvrdisplaydisconnected\" x\r\n        let inline onVrdisplayPresentChange x = onEvent \"onvrdisplaypresentchange\" x\r\n        let inline onWaiting x = onEvent \"onwaiting\"  x\r\n\r\n        let inline onBlur x = onEvent \"onblur\" x\r\n        let inline onFocus x = onEvent \"onfocus\" x\r\n\r\n//    [<AutoOpen>]\r\n//    module Svg = \r\n//        let svgNS = (\"namespace\",\"http://www.w3.org/2000/svg\")\r\n//        let inline svgElem tagName attrs children = \r\n//         Mithril.elem tagName (svgNS::attrs) children\r\n\r\n//        let inline svg a b = elem \"svg\" a b\r\n//        let inline circle a b = svgElem \"circle\"  a b\r\n//        let inline rect a b = svgElem \"rect\"  a b\r\n\r\n//        let inline width x = (\"width\", x)\r\n//        let inline height x = (\"height\", x)\r\n//        let inline viewBox x = (\"viewBox\", x)\r\n//        let inline cx x = (\"cx\", x)\r\n//        let inline cy x = (\"cy\", x)\r\n//        let inline r x =  (\"r\", x)\r\n//        let inline stroke x =  (\"stroke\", x)\r\n//        let inline strokeWidth x =  ( \"stroke-width\", x)\r\n//        let inline fill x = (\"fill\", x)\r\n\r\n\r\n\r\n    let attr (ls :(string *obj) list) =\r\n        let a = createEmpty<Attributes>\r\n        for (s,o) in ls do\r\n            match o with\r\n            | :? string as o2 -> if s = \"class\" then a.className <- Some(o2) else a.Item(s) <- o\r\n            | _ -> a.Item(s) <- o\r\n        Some(a)\r\n\r\n    let inline prop str (o :obj) =\r\n        (str,o)\r\n\r\n    let event evt v func =\r\n        let f = (fun (a :obj) -> func (a :?> 'a) :> obj)\r\n        prop evt (Globals.m.withAttr(v,Func<obj,obj>(f)) :> obj)\r\n\r\n    let bindattr str func =\r\n        let f = (fun (a :obj) -> func (a :?> 'a) :> obj)\r\n        let s = Globals.m.withAttr(str,Func<obj,obj>(f))\r\n        (fun e -> s.Invoke(e))\r\n\r\n    let cls str =\r\n        (\"class\",str :> obj)\r\n\r\n    let name str =\r\n        (\"name\",str :> obj)\r\n\r\n    let css ls = //change to style\r\n        let s = createEmpty\r\n        for (key,value) in ls do\r\n            s?key <- value\r\n        (\"style\",s)\r\n\r\n    let newComponent (c :obj [] -> 'a) (v :'a -> VirtualElement) =\r\n        let o = createEmpty<Component<'a>>\r\n        o?controller <- (fun x -> c x)\r\n        o?view <- v\r\n        o\r\n\r\n    //m wraps\r\n\r\n    let mount ((elm:Node),(componen:Component<'T>))=\r\n        Globals.m.mount(elm,componen)\r\n\r\n    let property (ob :'T) :BasicProperty<'T> =\r\n        Globals.m.prop(value = ob) \r\n\r\n    let prom (ob :Thennable<'T>) :Promise<'T> =\r\n        Globals.m.prop(promise = ob)\r\n\r\n    let routeComponent ((elm:Node),(root:string),(routes :obj)) =\r\n        Globals.m.route(elm,root,routes)\r\n        //routes obj\r\n        // createObj [\"/Home\"\" ==> Home] \r\n        // Home is component\r\n\r\n    let route () =\r\n        Globals.m.route\r\n\r\n    let reroute (route :string) =\r\n        Globals.m.route route\r\n\r\n    //  abstract deferred: obj with get, set\r\n\r\n    let defmodule ((elm:Node),(componen:Component<'T>)) =\r\n        Globals.m.``module``(elm,componen)\r\n\r\n    let defcomponent ((componen:Component<'T>),(args:obj[])) =\r\n        Globals.m.``component``(componen,args)\r\n\r\n    let redraw() =\r\n        Globals.m.redraw.redraw()\r\n\r\n    let trust html =\r\n        Globals.m.trust html\r\n\r\n    let redrawStrategy(rdw:string) =\r\n        Globals.m.redraw.set_strategy(rdw)\r\n\r\n    let render (elm,children) =\r\n        Globals.m.render (elm,children)\r\n\r\n    let forceRender (elm,children,force) =\r\n        Globals.m.render (elm,children,force)\r\n\r\n    let requestJSON (opt: JSONPOptions) =\r\n        Globals.m.request opt\r\n\r\n    let requestXHR (opt: XHROptions) =\r\n        Globals.m.request opt\r\n\r\n    let sync promises =\r\n        Globals.m.sync promises\r\n\r\n    let startComputation() =\r\n        Globals.m.startComputation()\r\n\r\n    let endComputation() =\r\n        Globals.m.endComputation()\r\n\r\n"]}