{"version":3,"sources":["..\\Types.fs"],"names":[],"mappings":";;;;;;;;AAOK;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAeA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMD,mBAAQ,gCAAR;AACA,OACA;AAKM;AACD;AANL,gEAOS,wBAPT,QAQQ,mBARR;AAQqB","file":"Types.js","sourcesContent":["ï»¿module Types\r\n\r\nopen System\r\nopen Fable.Import.Mithril\r\nopen Fable.Import\r\n\r\n[<Measure>]\r\ntype rad \r\n\r\n[<Literal>]\r\nlet tau=6.283185307179586476925286766559<rad>\r\n\r\nlet inline (|+|) a b = Array.append a b\r\n\r\nlet inline greater a b = if a > b then a else b\r\n\r\nlet inline sqr a = a * a\r\n\r\nlet inline sin (x :float<rad>)  = (x*(360.0/tau)) |> float |> sin \r\n\r\nlet inline cos (x :float<rad>)  = (x*(360.0/tau)) |> float |> cos \r\n\r\ntype NodeType =\r\n    | TRoot\r\n    | TLeaf\r\n    | TBranch\r\n\r\ntype NodeData = {\r\n    mutable distance :float\r\n    mutable ar :float<rad>\r\n    mutable angle :float<rad>\r\n    mutable pos :float*float\r\n    mutable scale :float\r\n    } \r\n\r\nand Tree = Node array\r\n\r\nand Element =\r\n    | Tree of Tree\r\n    | TextBox of string\r\n\r\nand Node = \r\n    {key :int \r\n     parent :int\r\n     data :NodeData \r\n     mutable element :Element \r\n     mutable ntype :NodeType\r\n     mutable scale :MithrilBase.Property<float>\r\n     mutable position :MithrilBase.Property<float*float>\r\n     mutable size :MithrilBase.Property<float>\r\n     mutable extsize :MithrilBase.Property<float>\r\n     }\r\n\r\ntype Params =\r\n    { div_tree_threshold :int \r\n      parent_to_children_scaling :float //0.5 is half the size\r\n      ar_scaleing :float\r\n      sort :Tree -> Tree}\r\n\r\nlet newND = {distance=0.0; ar=0.0<rad>; angle=0.0<rad>; pos=(0.0,0.0); scale=0.0;}\r\nlet newNode key parent element ntype = \r\n    {key=key;\r\n    data=newND;\r\n    element=element;\r\n    parent=parent;\r\n    ntype=ntype;\r\n    scale=property 1.0;\r\n    size=property 1.0;\r\n    position=property (0.0,0.0);\r\n    extsize=property 1.0}"]}