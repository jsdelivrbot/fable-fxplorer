var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { equalsUnions, Interface, GenericParam } from "fable-core/Util";
export var PromiseSeqInner = function () {
  function PromiseSeqInner(caseName, fields) {
    _classCallCheck(this, PromiseSeqInner);

    this.Case = caseName;
    this.Fields = fields;
  }

  _createClass(PromiseSeqInner, [{
    key: _Symbol.reflection,
    value: function value() {
      return {
        type: "Fable.PowerPack.PromiseSeqInner",
        interfaces: ["FSharpUnion", "System.IEquatable"],
        cases: {
          Cons: [GenericParam("T"), Interface("Fable.Import.JS.Promise")],
          Nil: []
        }
      };
    }
  }, {
    key: "Equals",
    value: function Equals(other) {
      return equalsUnions(this, other);
    }
  }]);

  return PromiseSeqInner;
}();
setType("Fable.PowerPack.PromiseSeqInner", PromiseSeqInner);
//# sourceMappingURL=Type.js.map