{"version":3,"sources":["../../src/PromiseSeq/Type.fs"],"names":[],"mappings":";;;;;;;AAgBI;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA","file":"Type.js","sourcesContent":["// ----------------------------------------------------------------------------\n// F# promise extensions (PromiseSeq.fs)\n// (c) Tomas Petricek, 2011, Available under Apache 2.0 license.\n// ----------------------------------------------------------------------------\nnamespace Fable.PowerPack\n\nopen Fable.Import\n\n/// An asynchronous sequence represents a delayed computation that can be\n/// started to produce either Cons value consisting of the next element of the\n/// sequence (head) together with the next asynchronous sequence (tail) or a\n/// special value representing the end of the sequence (Nil)\ntype PromiseSeq<'T> = JS.Promise<PromiseSeqInner<'T>>\n\n/// The interanl type that represents a value returned as a result of\n/// evaluating a step of an asynchronous sequence\nand PromiseSeqInner<'T> =\n  | Nil\n  | Cons of 'T * PromiseSeq<'T>\n"]}