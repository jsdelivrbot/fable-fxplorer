(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "fable-core/umd/Symbol", "fable-core/umd/Util"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("fable-core/umd/Symbol"), require("fable-core/umd/Util"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Symbol, global.Util);
    global.Type = mod.exports;
  }
})(this, function (exports, _Symbol2, _Util) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PromiseSeqInner = undefined;

  var _Symbol3 = _interopRequireDefault(_Symbol2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var PromiseSeqInner = exports.PromiseSeqInner = function () {
    function PromiseSeqInner(caseName, fields) {
      _classCallCheck(this, PromiseSeqInner);

      this.Case = caseName;
      this.Fields = fields;
    }

    _createClass(PromiseSeqInner, [{
      key: _Symbol3.default.reflection,
      value: function value() {
        return {
          type: "Fable.PowerPack.PromiseSeqInner",
          interfaces: ["FSharpUnion", "System.IEquatable"],
          cases: {
            Cons: [(0, _Util.GenericParam)("T"), (0, _Util.Interface)("Fable.Import.JS.Promise")],
            Nil: []
          }
        };
      }
    }, {
      key: "Equals",
      value: function Equals(other) {
        return (0, _Util.equalsUnions)(this, other);
      }
    }]);

    return PromiseSeqInner;
  }();

  (0, _Symbol2.setType)("Fable.PowerPack.PromiseSeqInner", PromiseSeqInner);
});
//# sourceMappingURL=Type.js.map