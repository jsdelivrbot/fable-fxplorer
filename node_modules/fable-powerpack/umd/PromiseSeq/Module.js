(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./Type", "../Promise", "fable-core/umd/Symbol", "fable-core/umd/Choice"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./Type"), require("../Promise"), require("fable-core/umd/Symbol"), require("fable-core/umd/Choice"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Type, global.Promise, global.Symbol, global.Choice);
    global.Module = mod.exports;
  }
})(this, function (exports, _Type, _Promise, _Symbol2, _Choice) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PromiseBuilder$2E$For = exports.promiseSeq = exports.PromiseSeqBuilder = undefined;
  exports.empty = empty;
  exports.singleton = singleton;
  exports.append = append;
  exports.tryNext = tryNext;
  exports.tryWith = tryWith;
  exports.tryFinally = tryFinally;
  exports.collect = collect;
  exports.mapAsync = mapAsync;
  exports.chooseAsync = chooseAsync;
  exports.filterAsync = filterAsync;
  exports.lastOrDefault = lastOrDefault;
  exports.firstOrDefault = firstOrDefault;
  exports.scanAsync = scanAsync;
  exports.iterAsync = iterAsync;
  exports.pairwise = pairwise;
  exports.foldAsync = foldAsync;
  exports.fold = fold;
  exports.scan = scan;
  exports.map = map;
  exports.iter = iter;
  exports.choose = choose;
  exports.filter = filter;
  exports.takeWhileAsync = takeWhileAsync;
  exports.skipWhileAsync = skipWhileAsync;
  exports.takeWhile = takeWhile;
  exports.skipWhile = skipWhile;
  exports.take = take;
  exports.skip = skip;

  var _Symbol3 = _interopRequireDefault(_Symbol2);

  var _Choice2 = _interopRequireDefault(_Choice);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function empty() {
    return Promise.resolve(new _Type.PromiseSeqInner("Nil", []));
  }

  function singleton(v) {
    return Promise.resolve(new _Type.PromiseSeqInner("Cons", [v, empty()]));
  }

  function append(seq1, seq2) {
    return function (builder_) {
      return builder_.Delay(function () {
        return seq1.then(function (_arg1) {
          return _arg1.Case === "Cons" ? Promise.resolve(new _Type.PromiseSeqInner("Cons", [_arg1.Fields[0], append(_arg1.Fields[1], seq2)])) : seq2;
        });
      });
    }(_Promise.PromiseImpl.promise);
  }

  var PromiseSeqBuilder = exports.PromiseSeqBuilder = function () {
    _createClass(PromiseSeqBuilder, [{
      key: _Symbol3.default.reflection,
      value: function value() {
        return {
          type: "Fable.PowerPack.PromiseSeqModule.PromiseSeqBuilder",
          properties: {}
        };
      }
    }]);

    function PromiseSeqBuilder() {
      _classCallCheck(this, PromiseSeqBuilder);
    }

    _createClass(PromiseSeqBuilder, [{
      key: "Yield",
      value: function Yield(v) {
        return singleton(v);
      }
    }, {
      key: "Return",
      value: function Return() {
        return empty();
      }
    }, {
      key: "YieldFrom",
      value: function YieldFrom(s) {
        return s;
      }
    }, {
      key: "Zero",
      value: function Zero() {
        return empty();
      }
    }, {
      key: "Bind",
      value: function Bind(inp, body) {
        return inp.then(body);
      }
    }, {
      key: "Combine",
      value: function Combine(seq1, seq2) {
        return append(seq1, seq2);
      }
    }, {
      key: "While",
      value: function While(gd, seq) {
        var _this = this;

        return gd() ? this.Combine(seq, this.Delay(function () {
          return _this.While(gd, seq);
        })) : this.Zero();
      }
    }, {
      key: "Delay",
      value: function Delay(f) {
        return _Promise.PromiseImpl.promise.Delay(f);
      }
    }, {
      key: "TryFinally",
      value: function TryFinally(body, compensation) {
        return tryFinally(body, compensation);
      }
    }, {
      key: "TryWith",
      value: function TryWith(body, handler) {
        return tryWith(body, handler);
      }
    }, {
      key: "Using",
      value: function Using(resource, binder) {
        return tryFinally(binder(resource), function () {
          if (resource != null) {
            resource.Dispose();
          }
        });
      }
    }, {
      key: "For_0",
      value: function For_0(seq, action) {
        var cur = null;

        var _enum = seq[Symbol.iterator]();

        return this.While(function () {
          cur = _enum.next();
          return !cur.done;
        }, this.Delay(function () {
          return action(cur.value);
        }));
      }
    }, {
      key: "For_1",
      value: function For_1(seq, action) {
        return collect(action, seq);
      }
    }]);

    return PromiseSeqBuilder;
  }();

  (0, _Symbol2.setType)("Fable.PowerPack.PromiseSeqModule.PromiseSeqBuilder", PromiseSeqBuilder);
  var promiseSeq = exports.promiseSeq = new PromiseSeqBuilder();

  function tryNext(input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Delay(function () {
          return input.then(function (_arg1) {
            return Promise.resolve(new _Choice2.default("Choice1Of2", [_arg1]));
          });
        }).catch(function (_arg2) {
          return Promise.resolve(new _Choice2.default("Choice2Of2", [_arg2]));
        });
      });
    }(_Promise.PromiseImpl.promise);
  }

  function tryWith(input, handler) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(tryNext(input), function (_arg1) {
          return _arg1.Case === "Choice2Of2" ? function () {
            var rest = _arg1.Fields[0];
            return builder_.YieldFrom(handler(rest));
          }() : _arg1.Fields[0].Case === "Cons" ? function () {
            var h = _arg1.Fields[0].Fields[0];
            var t = _arg1.Fields[0].Fields[1];
            return builder_.Combine(builder_.Yield(h), builder_.Delay(function () {
              return builder_.YieldFrom(tryWith(t, handler));
            }));
          }() : function () {
            return builder_.Zero();
          }();
        });
      });
    }(promiseSeq);
  }

  function tryFinally(input, compensation) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(tryNext(input), function (_arg1) {
          return _arg1.Case === "Choice2Of2" ? function () {
            var e = _arg1.Fields[0];
            compensation();
            return builder_.YieldFrom(function () {
              throw e;
            }());
          }() : _arg1.Fields[0].Case === "Cons" ? function () {
            var h = _arg1.Fields[0].Fields[0];
            var t = _arg1.Fields[0].Fields[1];
            return builder_.Combine(builder_.Yield(h), builder_.Delay(function () {
              return builder_.YieldFrom(tryFinally(t, compensation));
            }));
          }() : function () {
            compensation();
            return builder_.Zero();
          }();
        });
      });
    }(promiseSeq);
  }

  function collect(f, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(input, function (_arg1) {
          return _arg1.Case === "Cons" ? builder_.Combine(builder_.YieldFrom(f(_arg1.Fields[0])), builder_.Delay(function () {
            return builder_.YieldFrom(collect(f, _arg1.Fields[1]));
          })) : function () {
            return builder_.Zero();
          }();
        });
      });
    }(promiseSeq);
  }

  function PromiseBuilder_For(seq, action) {
    var _this2 = this;

    return seq.then(function (_arg1) {
      return _arg1.Case === "Cons" ? action(_arg1.Fields[0]).then(function () {
        return PromiseBuilder_For.bind(_this2)(_arg1.Fields[1], action);
      }) : Promise.resolve();
    });
  }

  exports.PromiseBuilder$2E$For = PromiseBuilder_For;

  function mapAsync(f, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.For_1(input, function (_arg1) {
          return builder_.Bind(f(_arg1), function (_arg2) {
            return builder_.Yield(_arg2);
          });
        });
      });
    }(promiseSeq);
  }

  function chooseAsync(f, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.For_1(input, function (_arg1) {
          return builder_.Bind(f(_arg1), function (_arg2) {
            return _arg2 != null ? builder_.Yield(_arg2) : function () {
              return builder_.Zero();
            }();
          });
        });
      });
    }(promiseSeq);
  }

  function filterAsync(f, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.For_1(input, function (_arg1) {
          return builder_.Bind(f(_arg1), function (_arg2) {
            return _arg2 ? builder_.Yield(_arg1) : builder_.Zero();
          });
        });
      });
    }(promiseSeq);
  }

  function lastOrDefault(def, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return input.then(function (_arg1) {
          return _arg1.Case === "Cons" ? lastOrDefault(_arg1.Fields[0], _arg1.Fields[1]) : Promise.resolve(def);
        });
      });
    }(_Promise.PromiseImpl.promise);
  }

  function firstOrDefault(def, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return input.then(function (_arg1) {
          return _arg1.Case === "Cons" ? Promise.resolve(_arg1.Fields[0]) : Promise.resolve(def);
        });
      });
    }(_Promise.PromiseImpl.promise);
  }

  function scanAsync(f, state, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(input, function (_arg1) {
          return _arg1.Case === "Cons" ? builder_.Bind(f(state)(_arg1.Fields[0]), function (_arg2) {
            return builder_.Combine(builder_.Yield(_arg2), builder_.Delay(function () {
              return builder_.YieldFrom(function (input_1) {
                return scanAsync(f, _arg2, input_1);
              }(_arg1.Fields[1]));
            }));
          }) : function () {
            return builder_.Zero();
          }();
        });
      });
    }(promiseSeq);
  }

  function iterAsync(f, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return PromiseBuilder_For.bind(builder_)(input, function (_arg1) {
          return f(_arg1).then(function () {
            return Promise.resolve();
          });
        });
      });
    }(_Promise.PromiseImpl.promise);
  }

  function pairwise(input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return builder_.Bind(input, function (_arg1) {
          return _arg1.Case === "Cons" ? function () {
            var prev = {
              contents: _arg1.Fields[0]
            };
            return builder_.For_1(_arg1.Fields[1], function (_arg2) {
              return builder_.Combine(builder_.Yield([prev.contents, _arg2]), builder_.Delay(function () {
                prev.contents = _arg2;
                return builder_.Zero();
              }));
            });
          }() : function () {
            return builder_.Zero();
          }();
        });
      });
    }(promiseSeq);
  }

  function foldAsync(f, state, input) {
    return function (input_1) {
      return lastOrDefault(state, input_1);
    }(function (input_1) {
      return scanAsync(f, state, input_1);
    }(input));
  }

  function fold(f, state, input) {
    return foldAsync(function (st) {
      return function (v) {
        return function (arg00) {
          return Promise.resolve(arg00);
        }(f(st)(v));
      };
    }, state, input);
  }

  function scan(f, state, input) {
    return scanAsync(function (st) {
      return function (v) {
        return function (arg00) {
          return Promise.resolve(arg00);
        }(f(st)(v));
      };
    }, state, input);
  }

  function map(f, input) {
    return mapAsync(function ($var1) {
      return function (arg00) {
        return Promise.resolve(arg00);
      }(f($var1));
    }, input);
  }

  function iter(f, input) {
    return iterAsync(function ($var2) {
      return function () {
        return Promise.resolve();
      }(f($var2));
    }, input);
  }

  function choose(f, input) {
    return chooseAsync(function ($var3) {
      return function (arg00) {
        return Promise.resolve(arg00);
      }(f($var3));
    }, input);
  }

  function filter(f, input) {
    return filterAsync(function ($var4) {
      return function (arg00) {
        return Promise.resolve(arg00);
      }(f($var4));
    }, input);
  }

  function takeWhileAsync(p, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return input.then(function (_arg1) {
          return _arg1.Case === "Nil" ? Promise.resolve(new _Type.PromiseSeqInner("Nil", [])) : p(_arg1.Fields[0]).then(function (_arg2) {
            return _arg2 ? Promise.resolve(new _Type.PromiseSeqInner("Cons", [_arg1.Fields[0], takeWhileAsync(p, _arg1.Fields[1])])) : Promise.resolve(new _Type.PromiseSeqInner("Nil", []));
          });
        });
      });
    }(_Promise.PromiseImpl.promise);
  }

  function skipWhileAsync(p, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return input.then(function (_arg1) {
          return _arg1.Case === "Nil" ? Promise.resolve(new _Type.PromiseSeqInner("Nil", [])) : p(_arg1.Fields[0]).then(function (_arg2) {
            return _arg2 ? skipWhileAsync(p, _arg1.Fields[1]) : _arg1.Fields[1];
          });
        });
      });
    }(_Promise.PromiseImpl.promise);
  }

  function takeWhile(p, input) {
    return takeWhileAsync(function ($var5) {
      return function (arg00) {
        return Promise.resolve(arg00);
      }(p($var5));
    }, input);
  }

  function skipWhile(p, input) {
    return skipWhileAsync(function ($var6) {
      return function (arg00) {
        return Promise.resolve(arg00);
      }(p($var6));
    }, input);
  }

  function take(count, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return count > 0 ? input.then(function (_arg1) {
          return _arg1.Case === "Nil" ? Promise.resolve(new _Type.PromiseSeqInner("Nil", [])) : Promise.resolve(new _Type.PromiseSeqInner("Cons", [_arg1.Fields[0], take(count - 1, _arg1.Fields[1])]));
        }) : Promise.resolve(new _Type.PromiseSeqInner("Nil", []));
      });
    }(_Promise.PromiseImpl.promise);
  }

  function skip(count, input) {
    return function (builder_) {
      return builder_.Delay(function () {
        return count > 0 ? input.then(function (_arg1) {
          return _arg1.Case === "Nil" ? Promise.resolve(new _Type.PromiseSeqInner("Nil", [])) : skip(count - 1, _arg1.Fields[1]);
        }) : input;
      });
    }(_Promise.PromiseImpl.promise);
  }
});
//# sourceMappingURL=Module.js.map