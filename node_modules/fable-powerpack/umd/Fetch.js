(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "./Promise", "fable-core/umd/Serialize"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("./Promise"), require("fable-core/umd/Serialize"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.Promise, global.Serialize);
        global.Fetch = mod.exports;
    }
})(this, function (exports, _Promise2, _Serialize) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.fetch = undefined;
    exports.tryFetch = tryFetch;
    exports.fetchAs = fetchAs;
    exports.tryFetchAs = tryFetchAs;
    exports.postRecord = postRecord;
    exports.tryPostRecord = tryPostRecord;
    exports.patchRecord = patchRecord;

    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }

        return obj;
    }

    function _fetch(url, init) {
        return fetch(url, init).then(function (response) {
            return response.ok ? response : function () {
                throw new Error(String(response.status) + " " + response.statusText + " for URL " + response.url);
            }();
        });
    }

    exports.fetch = _fetch;

    function tryFetch(url, init) {
        return _Promise2.Promise.result(_fetch(url, init));
    }

    function fetchAs(url, init, _genArgs) {
        return _fetch(url, init).then(function (fetched) {
            return fetched.text();
        }).then(function (json) {
            return (0, _Serialize.ofJson)(json, {
                T: _genArgs.T
            });
        });
    }

    function tryFetchAs(url, init, _genArgs) {
        return _Promise2.Promise.result(fetchAs(url, init, {
            T: _genArgs.T
        }));
    }

    function postRecord(url, record, properties) {
        var props = Object.assign({
            method: "POST",
            headers: _defineProperty({}, "Content-Type", "application/json"),
            body: (0, _Serialize.toJson)(record)
        }, properties);
        return _fetch(url, props);
    }

    function tryPostRecord(url, record, properties) {
        return _Promise2.Promise.result(postRecord(url, record, properties));
    }

    function patchRecord(url, record, properties) {
        var props = Object.assign({
            method: "PATCH",
            headers: _defineProperty({}, "Content-Type", "application/json"),
            body: (0, _Serialize.toJson)(record)
        }, properties);
        return _fetch(url, props);
    }
});
//# sourceMappingURL=Fetch.js.map