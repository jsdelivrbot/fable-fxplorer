{"version":3,"sources":["../../src/Result.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUU;AAAA,oCAEO;AAAA;AAAO,SAAP,EAFP;AAAC;;AAOD;AAAA,oCAEO,kCAFP,GACI,kBAAI,eAAJ,EADJ;AAAC;;AAOD;AAAA,oCAEO,kCAFP,GACI,eADJ;AAAC;;;;;;;;;;;;;AAMN;AAAA;AAAA;;;;uCACwB;AAAA;AAAQ;;;sCACmB;AAAA;AAAI;;;;;;;;iDAKpD;AAAA;AAAA;AAAA;AAAgC;;;gCAHjB;AAAA;;AAAA;AAAA;AAAA;AAAW;;;;;;;AAe9B,kCAAS,mBAAT","file":"Result.js","sourcesContent":["module Fable.PowerPack.Result\n\n\n// TODO replace this with F# 4.1 Result\ntype Result<'A, 'B> =\n| Ok of 'A\n| Error of 'B\n\n\nlet unwrapResult a =\n    match a with\n    | Ok a -> a\n    | Error b -> raise b\n\n\n// TODO replace this with F# 4.1 map\nlet map fn a =\n    match a with\n    | Ok a -> Ok (fn a)\n    | Error b -> Error b\n\n\n// TODO replace this with F# 4.1 bind\nlet bind fn a =\n    match a with\n    | Ok a -> fn a\n    | Error b -> Error b\n\n\n// TODO implement TryFinally, TryWith, Using, While, and For ?\ntype ResultBuilder() =\n    member this.Bind(m, f) = bind f m\n    member this.Return<'A, 'E>(a: 'A): Result<'A, 'E> = Ok a\n    member this.ReturnFrom(m) = m\n    member this.Zero = this.Return\n\n    member this.Combine<'A, 'E>(left: Result<unit, 'E>, right: Result<'A, 'E>): Result<'A, 'E> =\n        this.Bind(left, fun () -> right)\n\n    (*member this.For<'A, 'E>(s: seq<'A>, fn: ('A -> Result<unit, 'E>)): Result<unit, 'E> =\n        let error = Seq.tryFind (fun a ->\n            match fn a with\n            | Ok () -> false\n            | Error _ -> true) s\n\n        match error with\n        | Some e -> e\n        | None -> this.Zero()*)\n\nlet result = new ResultBuilder()\n"]}