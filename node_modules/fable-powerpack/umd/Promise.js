(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "./Result", "fable-core/umd/Symbol"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("./Result"), require("fable-core/umd/Symbol"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.Result, global.Symbol);
        global.Promise = mod.exports;
    }
})(this, function (exports, _Result, _Symbol2) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PromiseImpl = exports.Promise = undefined;

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var _Promise = function (__exports) {
        var result = __exports.result = function result(a) {
            return a.then(function (arg0) {
                return new _Result.Result("Ok", [arg0]);
            }, function (arg0) {
                return new _Result.Result("Error", [arg0]);
            });
        };

        var mapResult = __exports.mapResult = function mapResult(fn, a) {
            return a.then(function (a_1) {
                return (0, _Result.map)(fn, a_1);
            });
        };

        var bindResult = __exports.bindResult = function bindResult(fn, a) {
            return a.then(function (a_1) {
                return a_1.Case === "Error" ? Promise.resolve(new _Result.Result("Error", [a_1.Fields[0]])) : result(fn(a_1.Fields[0]));
            });
        };

        var PromiseBuilder = __exports.PromiseBuilder = function () {
            _createClass(PromiseBuilder, [{
                key: _Symbol3.default.reflection,
                value: function value() {
                    return {
                        type: "Fable.PowerPack.Promise.PromiseBuilder",
                        properties: {}
                    };
                }
            }]);

            function PromiseBuilder() {
                _classCallCheck(this, PromiseBuilder);
            }

            _createClass(PromiseBuilder, [{
                key: "For",
                value: function For(seq, body) {
                    var p = Promise.resolve();
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        var _loop = function _loop() {
                            var a = _step.value;
                            p = p.then(function () {
                                return body(a);
                            });
                        };

                        for (var _iterator = seq[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            _loop();
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    return p;
                }
            }, {
                key: "While",
                value: function While(guard, p) {
                    var _this = this;

                    return guard() ? p.then(function () {
                        return _this.While(guard, p);
                    }) : Promise.resolve();
                }
            }, {
                key: "TryFinally",
                value: function TryFinally(p, compensation) {
                    return p.then(function (x) {
                        compensation();
                        return x;
                    }, function (er) {
                        compensation();
                        throw er;
                    });
                }
            }, {
                key: "Delay",
                value: function Delay(generator) {
                    return {
                        then: function then(f1, f2) {
                            try {
                                return generator().then(f1, f2);
                            } catch (er) {
                                if (f2 == null) {
                                    return Promise.reject(er);
                                } else {
                                    try {
                                        return Promise.resolve(f2(er));
                                    } catch (er_1) {
                                        return Promise.reject(er_1);
                                    }
                                }
                            }
                        },
                        catch: function _catch(f) {
                            try {
                                return generator().catch(f);
                            } catch (er) {
                                try {
                                    return Promise.resolve(f(er));
                                } catch (er_1) {
                                    return Promise.reject(er_1);
                                }
                            }
                        }
                    };
                }
            }, {
                key: "Using",
                value: function Using(resource, binder) {
                    return this.TryFinally(binder(resource), function () {
                        resource.Dispose();
                    });
                }
            }]);

            return PromiseBuilder;
        }();

        (0, _Symbol2.setType)("Fable.PowerPack.Promise.PromiseBuilder", PromiseBuilder);
        return __exports;
    }({});

    exports.Promise = _Promise;

    var PromiseImpl = exports.PromiseImpl = function (__exports) {
        var promise = __exports.promise = new _Promise.PromiseBuilder();
        return __exports;
    }({});
});
//# sourceMappingURL=Promise.js.map