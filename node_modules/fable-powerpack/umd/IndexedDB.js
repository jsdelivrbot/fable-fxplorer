(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "fable-core/umd/Symbol", "fable-core/umd/Util", "fable-core/umd/Reflection", "./PromiseSeq/Extensions"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("fable-core/umd/Symbol"), require("fable-core/umd/Util"), require("fable-core/umd/Reflection"), require("./PromiseSeq/Extensions"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.Symbol, global.Util, global.Reflection, global.Extensions);
        global.IndexedDB = mod.exports;
    }
})(this, function (exports, _Symbol2, _Util, _Reflection, _Extensions) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.IndexedDB = exports.IDBObjectStore$2E$putAsync = exports.IDBObjectStore$2E$clearAsync = exports.IDBObjectStore$2E$deleteAsync = exports.IDBObjectStore$2E$addAsync = exports.IDBObjectStore$2E$openCursorAsync = exports.IDBObjectStore$2E$getAsync = exports.DBCursorDirection = exports.DBKeyMethod = undefined;
    exports.createStore = createStore;
    exports.deleteStore = deleteStore;
    exports.openCursor = openCursor;
    exports.countAllAsync = countAllAsync;
    exports.countKeyAsync = countKeyAsync;
    exports.countRangeAsync = countRangeAsync;
    exports.getAsync = getAsync;
    exports.getFirstAsync = getFirstAsync;
    exports.getKeyAsync = getKeyAsync;
    exports.getKeyFirstAsync = getKeyFirstAsync;

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var DBKeyMethod = exports.DBKeyMethod = function () {
        function DBKeyMethod(caseName, fields) {
            _classCallCheck(this, DBKeyMethod);

            this.Case = caseName;
            this.Fields = fields;
        }

        _createClass(DBKeyMethod, [{
            key: _Symbol3.default.reflection,
            value: function value() {
                return {
                    type: "Fable.PowerPack.Experimental.IndexedDB.DBKeyMethod",
                    interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                    cases: {
                        AutoIncrement: [],
                        KeyPath: ["string"]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function Equals(other) {
                return (0, _Util.equalsUnions)(this, other);
            }
        }, {
            key: "CompareTo",
            value: function CompareTo(other) {
                return (0, _Util.compareUnions)(this, other);
            }
        }]);

        return DBKeyMethod;
    }();

    (0, _Symbol2.setType)("Fable.PowerPack.Experimental.IndexedDB.DBKeyMethod", DBKeyMethod);

    var DBCursorDirection = exports.DBCursorDirection = function () {
        function DBCursorDirection(caseName, fields) {
            _classCallCheck(this, DBCursorDirection);

            this.Case = caseName;
            this.Fields = fields;
        }

        _createClass(DBCursorDirection, [{
            key: _Symbol3.default.reflection,
            value: function value() {
                return {
                    type: "Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection",
                    interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                    cases: {
                        Next: [],
                        NextUnique: [],
                        Prev: [],
                        PrevUnique: []
                    }
                };
            }
        }, {
            key: "Equals",
            value: function Equals(other) {
                return (0, _Util.equalsUnions)(this, other);
            }
        }, {
            key: "CompareTo",
            value: function CompareTo(other) {
                return (0, _Util.compareUnions)(this, other);
            }
        }, {
            key: "ToString",
            value: function ToString() {
                return this.Case === "NextUnique" ? "nextunique" : this.Case === "Prev" ? "prev" : this.Case === "PrevUnique" ? "prevunique" : "next";
            }
        }], [{
            key: "Default",
            get: function get() {
                return new DBCursorDirection("Next", []);
            }
        }]);

        return DBCursorDirection;
    }();

    (0, _Symbol2.setType)("Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection", DBCursorDirection);

    function createStore(keyMethod, db, _genArgs) {
        var args = {};

        if (keyMethod.Case === "AutoIncrement") {
            args.autoIncrement = true;
        } else {
            args.keyPath = keyMethod.Fields[0];
        }

        var storeName = (0, _Reflection.getTypeFullName)(_genArgs.T, "name");
        return db.createObjectStore(storeName, args);
    }

    function deleteStore(db, _genArgs) {
        var storeName = (0, _Reflection.getTypeFullName)(_genArgs.T, "name");
        db.deleteObjectStore(storeName);
    }

    function openCursor(index, keyCursor, range, direction, step) {
        var range_1 = range != null ? range : null;
        var direction_1 = (0, _Util.toString)(direction != null ? direction : DBCursorDirection.Default);
        var step_1 = step != null ? step : 1;
        var request = keyCursor ? index.openKeyCursor(range_1, direction_1) : index.openCursor(range_1, direction_1);

        var cursorSeq = function cursorSeq() {
            return function (builder_) {
                return builder_.Delay(function () {
                    return builder_.Bind(new Promise(function (cont, _arg2) {
                        request.onsuccess = function (_arg1) {
                            request.onsuccess = null;

                            if (request.result) {
                                var cursor = request.result;
                                cont(cursor.value);
                                cursor.advance(step_1);
                            } else {
                                cont();
                            }

                            return null;
                        };
                    }), function (_arg1) {
                        return _arg1 != null ? builder_.Combine(builder_.Yield(_arg1), builder_.Delay(function () {
                            return builder_.YieldFrom(cursorSeq());
                        })) : function () {
                            return builder_.Zero();
                        }();
                    });
                });
            }(_Extensions.promiseSeq);
        };

        return cursorSeq();
    }

    function countAllAsync(x) {
        return new Promise(function (cont, econt) {
            var request = x.count();

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    function countKeyAsync(indexKey, x) {
        return new Promise(function (cont, econt) {
            var request = x.count(indexKey);

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    function countRangeAsync(indexKeyRange, x) {
        return new Promise(function (cont, econt) {
            var request = x.count(indexKeyRange);

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    function getAsync(indexKey, x) {
        return new Promise(function (cont, econt) {
            var request = x.get(indexKey);

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    function getFirstAsync(indexKeyRange, x) {
        return new Promise(function (cont, econt) {
            var request = x.get(indexKeyRange);

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    function getKeyAsync(indexKey, x) {
        return new Promise(function (cont, econt) {
            var request = x.getKey(indexKey);

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    function getKeyFirstAsync(indexKeyRange, x) {
        return new Promise(function (cont, econt) {
            var request = x.getKey(indexKeyRange);

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    function IDBObjectStore_getAsync(key) {
        var _this = this;

        return new Promise(function (cont, econt) {
            var request = _this.get(key);

            request.onerror = function (_arg1) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg2) {
                return cont(request.result);
            };
        });
    }

    exports.IDBObjectStore$2E$getAsync = IDBObjectStore_getAsync;

    function IDBObjectStore_openCursorAsync(range, direction, step) {
        return openCursor(this, false, range, direction, step);
    }

    exports.IDBObjectStore$2E$openCursorAsync = IDBObjectStore_openCursorAsync;

    function IDBObjectStore_addAsync(item) {
        var _this2 = this;

        return new Promise(function (cont, econt) {
            var request = _this2.add(item);

            request.onerror = function (_arg3) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg4) {
                return cont(request.result);
            };
        });
    }

    exports.IDBObjectStore$2E$addAsync = IDBObjectStore_addAsync;

    function IDBObjectStore_deleteAsync(key) {
        var _this3 = this;

        return new Promise(function (cont, econt) {
            var request = _this3.delete(key);

            request.onerror = function (_arg5) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg6) {
                return cont();
            };
        });
    }

    exports.IDBObjectStore$2E$deleteAsync = IDBObjectStore_deleteAsync;

    function IDBObjectStore_clearAsync() {
        var _this4 = this;

        return new Promise(function (cont, econt) {
            var request = _this4.clear();

            request.onerror = function (_arg7) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg8) {
                return cont();
            };
        });
    }

    exports.IDBObjectStore$2E$clearAsync = IDBObjectStore_clearAsync;

    function IDBObjectStore_putAsync(item) {
        var _this5 = this;

        return new Promise(function (cont, econt) {
            var request = _this5.put(item);

            request.onerror = function (_arg9) {
                return econt(new Error(request.error.name));
            };

            request.onsuccess = function (_arg10) {
                return cont(request.result);
            };
        });
    }

    exports.IDBObjectStore$2E$putAsync = IDBObjectStore_putAsync;

    var IndexedDB = exports.IndexedDB = function () {
        _createClass(IndexedDB, [{
            key: _Symbol3.default.reflection,
            value: function value() {
                return {
                    type: "Fable.PowerPack.Experimental.IndexedDB.IndexedDB",
                    properties: {}
                };
            }
        }]);

        function IndexedDB() {
            _classCallCheck(this, IndexedDB);
        }

        _createClass(IndexedDB, [{
            key: "DeleteDatabase",
            value: function DeleteDatabase(_genArgs) {
                return new Promise(function (cont, econt) {
                    var name = (0, _Reflection.getTypeFullName)(_genArgs.T, "name");
                    var request = indexedDB.deleteDatabase(name);

                    request.onerror = function (_arg11) {
                        return econt(new Error(request.error.name));
                    };

                    request.onsuccess = function (_arg12) {
                        return cont();
                    };
                });
            }
        }, {
            key: "Use",
            value: function Use(mkTransaction, execTransaction, _genArgs) {
                return new Promise(function (cont, econt) {
                    var impl = new _genArgs.T();
                    var name = (0, _Reflection.getTypeFullName)(_genArgs.T, "name");
                    var request = indexedDB.open(name, impl.Version);

                    request.onerror = function (_arg13) {
                        econt(new Error(request.error.name));
                        return null;
                    };

                    request.onupgradeneeded = function (ev) {
                        try {
                            var db = request.result;
                            impl.Upgrade(db);
                        } catch (e) {
                            econt(e);
                        }

                        return null;
                    };

                    request.onsuccess = function (_arg16) {
                        try {
                            var db = request.result;
                            var trans = mkTransaction(db);
                            execTransaction(trans).then(function (res) {
                                trans.oncomplete = function (_arg14) {
                                    db.close();
                                    return cont(res);
                                };

                                trans.onerror = function (_arg15) {
                                    db.close();
                                    return econt(new Error(trans.error.name));
                                };
                            }).catch(econt);
                        } catch (e) {
                            econt(e);
                        }

                        return null;
                    };
                });
            }
        }, {
            key: "UseStoreReadOnly1",
            value: function UseStoreReadOnly1(transaction, _genArgs) {
                var _this6 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction(storeName1, "readonly");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    return transaction(store1);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this6.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }, {
            key: "UseStoreReadOnly2",
            value: function UseStoreReadOnly2(transaction, _genArgs) {
                var _this7 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");
                var storeName2 = (0, _Reflection.getTypeFullName)(_genArgs.S2, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction([storeName1, storeName2], "readonly");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    var store2 = trans.objectStore(storeName2);
                    return transaction(store1)(store2);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this7.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }, {
            key: "UseStoreReadOnly3",
            value: function UseStoreReadOnly3(transaction, _genArgs) {
                var _this8 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");
                var storeName2 = (0, _Reflection.getTypeFullName)(_genArgs.S2, "name");
                var storeName3 = (0, _Reflection.getTypeFullName)(_genArgs.S3, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction([storeName1, storeName2, storeName3], "readonly");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    var store2 = trans.objectStore(storeName2);
                    var store3 = trans.objectStore(storeName3);
                    return transaction(store1)(store2)(store3);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this8.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }, {
            key: "UseStoreReadOnly4",
            value: function UseStoreReadOnly4(transaction, _genArgs) {
                var _this9 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");
                var storeName2 = (0, _Reflection.getTypeFullName)(_genArgs.S2, "name");
                var storeName3 = (0, _Reflection.getTypeFullName)(_genArgs.S3, "name");
                var storeName4 = (0, _Reflection.getTypeFullName)(_genArgs.S4, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction([storeName1, storeName2, storeName3, storeName4], "readonly");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    var store2 = trans.objectStore(storeName2);
                    var store3 = trans.objectStore(storeName3);
                    var store4 = trans.objectStore(storeName4);
                    return transaction(store1)(store2)(store3)(store4);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this9.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }, {
            key: "UseStoreReadWrite1",
            value: function UseStoreReadWrite1(transaction, _genArgs) {
                var _this10 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction(storeName1, "readwrite");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    return transaction(store1);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this10.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }, {
            key: "UseStoreReadWrite2",
            value: function UseStoreReadWrite2(transaction, _genArgs) {
                var _this11 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");
                var storeName2 = (0, _Reflection.getTypeFullName)(_genArgs.S2, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction([storeName1, storeName2], "readwrite");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    var store2 = trans.objectStore(storeName2);
                    return transaction(store1)(store2);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this11.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }, {
            key: "UseStoreReadWrite3",
            value: function UseStoreReadWrite3(transaction, _genArgs) {
                var _this12 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");
                var storeName2 = (0, _Reflection.getTypeFullName)(_genArgs.S2, "name");
                var storeName3 = (0, _Reflection.getTypeFullName)(_genArgs.S3, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction([storeName1, storeName2, storeName3], "readwrite");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    var store2 = trans.objectStore(storeName2);
                    var store3 = trans.objectStore(storeName3);
                    return transaction(store1)(store2)(store3);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this12.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }, {
            key: "UseStoreReadWrite4",
            value: function UseStoreReadWrite4(transaction, _genArgs) {
                var _this13 = this;

                var storeName1 = (0, _Reflection.getTypeFullName)(_genArgs.S1, "name");
                var storeName2 = (0, _Reflection.getTypeFullName)(_genArgs.S2, "name");
                var storeName3 = (0, _Reflection.getTypeFullName)(_genArgs.S3, "name");
                var storeName4 = (0, _Reflection.getTypeFullName)(_genArgs.S4, "name");

                var mkTransaction = function mkTransaction(db) {
                    return db.transaction([storeName1, storeName2, storeName3, storeName4], "readwrite");
                };

                var execTransaction = function execTransaction(trans) {
                    var store1 = trans.objectStore(storeName1);
                    var store2 = trans.objectStore(storeName2);
                    var store3 = trans.objectStore(storeName3);
                    var store4 = trans.objectStore(storeName4);
                    return transaction(store1)(store2)(store3)(store4);
                };

                return function (arg00) {
                    return function (arg10) {
                        return _this13.Use(arg00, arg10, {
                            T: _genArgs.T,
                            Result: _genArgs.Result
                        });
                    };
                }(mkTransaction)(execTransaction);
            }
        }]);

        return IndexedDB;
    }();

    (0, _Symbol2.setType)("Fable.PowerPack.Experimental.IndexedDB.IndexedDB", IndexedDB);
});
//# sourceMappingURL=IndexedDB.js.map