(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(["exports", "fable-core/umd/Symbol", "fable-core/umd/Util"], factory);
    } else if (typeof exports !== "undefined") {
        factory(exports, require("fable-core/umd/Symbol"), require("fable-core/umd/Util"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.Symbol, global.Util);
        global.Result = mod.exports;
    }
})(this, function (exports, _Symbol2, _Util) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.result = exports.ResultBuilder = exports.Result = undefined;
    exports.unwrapResult = unwrapResult;
    exports.map = map;
    exports.bind = bind;

    var _Symbol3 = _interopRequireDefault(_Symbol2);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var Result = exports.Result = function () {
        function Result(caseName, fields) {
            _classCallCheck(this, Result);

            this.Case = caseName;
            this.Fields = fields;
        }

        _createClass(Result, [{
            key: _Symbol3.default.reflection,
            value: function value() {
                return {
                    type: "Fable.PowerPack.Result.Result",
                    interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                    cases: {
                        Error: [(0, _Util.GenericParam)("B")],
                        Ok: [(0, _Util.GenericParam)("A")]
                    }
                };
            }
        }, {
            key: "Equals",
            value: function Equals(other) {
                return (0, _Util.equalsUnions)(this, other);
            }
        }, {
            key: "CompareTo",
            value: function CompareTo(other) {
                return (0, _Util.compareUnions)(this, other);
            }
        }]);

        return Result;
    }();

    (0, _Symbol2.setType)("Fable.PowerPack.Result.Result", Result);

    function unwrapResult(a) {
        return a.Case === "Error" ? function () {
            throw a.Fields[0];
        }() : a.Fields[0];
    }

    function map(fn, a) {
        return a.Case === "Error" ? new Result("Error", [a.Fields[0]]) : new Result("Ok", [fn(a.Fields[0])]);
    }

    function bind(fn, a) {
        return a.Case === "Error" ? new Result("Error", [a.Fields[0]]) : fn(a.Fields[0]);
    }

    var ResultBuilder = exports.ResultBuilder = function () {
        _createClass(ResultBuilder, [{
            key: _Symbol3.default.reflection,
            value: function value() {
                return {
                    type: "Fable.PowerPack.Result.ResultBuilder",
                    properties: {}
                };
            }
        }]);

        function ResultBuilder() {
            _classCallCheck(this, ResultBuilder);
        }

        _createClass(ResultBuilder, [{
            key: "Bind",
            value: function Bind(m, f) {
                return bind(f, m);
            }
        }, {
            key: "Return",
            value: function Return(a) {
                return new Result("Ok", [a]);
            }
        }, {
            key: "ReturnFrom",
            value: function ReturnFrom(m) {
                return m;
            }
        }, {
            key: "Combine",
            value: function Combine(left, right) {
                return this.Bind(left, function () {
                    return right;
                });
            }
        }, {
            key: "Zero",
            get: function get() {
                var _this = this;

                return function (arg00) {
                    return _this.Return(arg00);
                };
            }
        }]);

        return ResultBuilder;
    }();

    (0, _Symbol2.setType)("Fable.PowerPack.Result.ResultBuilder", ResultBuilder);
    var result = exports.result = new ResultBuilder();
});
//# sourceMappingURL=Result.js.map