{"version":3,"sources":["../src/Fetch.fs"],"names":[],"mappings":";;;;;AA0VO;AAAA,WADH,gBACG,MACC;AAAA,wCAKI;AAAA,4BAAU,gFAAV;AAA0F,SAA1F,EALJ;AAAA,KADD;AAMgG;;;AAGnG,OACkB;AAAA,2BAAlB,iBAAkB;AAAc;AAIf,OAGd;AAAA,WAFH,iBAEG,MAD6B;AAAA;AAAA,KAC7B,OAAY;AAAA;AAAA;AAAA;AAAA,KAAZ;AAAsB;AAGR,OACG;AAAA,2BAApB;AAAA;AAAA,MAAoB;AAAc;AAKlC,OACI;AACA,8BACI;AAAA;AAC2B,wEAD3B;AAEgC;AAFhC,KADJ;AAIJ;AALS;AAQT,OACoC;AAAA,2BAApC,mCAAoC;AAAc;AAKlD,OACI;AACA,8BACI;AAAA;AAC2B,wEAD3B;AAEgC;AAFhC,KADJ;AAIJ;AALS","file":"Fetch.js","sourcesContent":["/// The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses.\n/// It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.\nmodule Fable.PowerPack.Fetch\n\n#nowarn \"1182\" // Unused values\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\nopen Fable.PowerPack.Result\n\nmodule Fetch_types =\n\n    type Body =\n        abstract bodyUsed: bool with get, set\n        abstract arrayBuffer: unit -> JS.Promise<JS.ArrayBuffer>\n        abstract blob: unit -> JS.Promise<Browser.Blob>;\n        abstract formData: unit -> JS.Promise<Browser.FormData>\n        abstract json : unit -> JS.Promise<obj>;\n        abstract json<'T> : unit -> JS.Promise<'T>\n        abstract text : unit -> JS.Promise<string>\n\n    and Request = //(input: U2<string, Request>, ?init: RequestInit) =\n        inherit Body\n        abstract ``method`` : string with get\n        abstract url: string with get\n        abstract headers: Headers with get\n        abstract referrer: string with get\n        abstract mode: U2<string,RequestMode> with get\n        abstract credentials: U2<string,RequestCredentials> with get\n        abstract cache: U2<string,RequestCache> with get\n        abstract clone: unit -> unit\n\n    and RequestInit =\n        abstract ``method``: string option with get, set\n        abstract headers: U2<HeaderInit, obj> option with get, set\n        abstract body: BodyInit option with get, set\n        abstract mode: RequestMode option with get, set\n        abstract credentials: RequestCredentials option with get, set\n        abstract cache: RequestCache option with get, set\n\n    and [<StringEnum; RequireQualifiedAccess>] RequestContext =\n        | Audio | Beacon | Cspreport | Download | Embed | Eventsource | Favicon | Fetch | Font\n        | Form | Frame | Hyperlink | Iframe | Image | Imageset | Import | Internal | Location\n        | Manifest | Object | Ping | Plugin | Prefetch | Script | Serviceworker | Sharedworker\n        | Subresource | Style | Track | Video | Worker | Xmlhttprequest | Xslt\n\n    and [<StringEnum; RequireQualifiedAccess>] RequestMode =\n        | [<CompiledName(\"same-origin\")>]Sameorigin | [<CompiledName(\"no-cors\")>]Nocors | Cors\n\n    and [<StringEnum; RequireQualifiedAccess>] RequestCredentials =\n        Omit | [<CompiledName(\"same-origin\")>]Sameorigin | Include\n\n    and [<StringEnum; RequireQualifiedAccess>] RequestCache =\n        | Default\n        | [<CompiledName(\"no-store\")>]Nostore\n        | Reload\n        | [<CompiledName(\"no-cache\")>]Nocache\n        | [<CompiledName(\"force-cache\")>]Forcecache\n        | [<CompiledName(\"only-if-cached\")>]Onlyifcached\n\n    and Headers =\n        abstract append : string * string -> unit\n        abstract delete : string -> unit\n        abstract get : string -> string\n        abstract getAll : string -> string[]\n        abstract has : string -> bool\n        abstract set : string * string -> unit\n\n        /// Specifying which web sites can participate in cross-origin resource sharing\n        [<Emit(\"$0.get('Access-Control-Allow-Origin')\")>] abstract AccessControlAllowOrigin: string option\n\n        /// Specifies which patch document formats this server supports\n        [<Emit(\"$0.get('Accept-Patch')\")>] abstract AcceptPatch: string option\n\n        /// What partial content range types this server supports via byte serving\n        [<Emit(\"$0.get('Accept-Ranges')\")>] abstract AcceptRanges: string option\n\n        /// The age the object has been in a proxy cache in seconds\n        [<Emit(\"$0.get('Age')\")>] abstract Age: string option\n\n        /// Valid actions for a specified resource. To be used for a 405 Method not allowed\n        [<Emit(\"$0.get('Allow')\")>] abstract Allow: string option\n\n        /// A server uses \"Alt-Svc\" header (meaning Alternative Services) to indicate that its resources can also be accessed at a different network location (host or port) or using a different protocol\n        [<Emit(\"$0.get('Alt-Svc')\")>] abstract AltSvc: string option\n\n        /// Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds\n        [<Emit(\"$0.get('Cache-Control')\")>] abstract CacheControl: string option\n\n        /// Control options for the current connection and list of hop-by-hop response fields\n        [<Emit(\"$0.get('Connection')\")>] abstract Connection: string option\n\n        /// An opportunity to raise a \"File Download\" dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.\n        [<Emit(\"$0.get('Content-Disposition')\")>] abstract ContentDisposition: string option\n\n        /// The type of encoding used on the data\n        [<Emit(\"$0.get('Content-Encoding')\")>] abstract ContentEncoding: string option\n\n        /// The natural language or languages of the intended audience for the enclosed content\n        [<Emit(\"$0.get('Content-Language')\")>] abstract ContentLanguage: string option\n\n        /// The length of the response body in octets (8-bit bytes)\n        [<Emit(\"$0.get('Content-Length')\")>] abstract ContentLength: string option\n\n        /// An alternate location for the returned data\n        [<Emit(\"$0.get('Content-Location')\")>] abstract ContentLocation: string option\n\n        /// A Base64-encoded binary MD5 sum of the content of the response\n        [<Emit(\"$0.get('Content-MD5')\")>] abstract ContentMD5: string option\n\n        /// Where in a full body message this partial message belongs\n        [<Emit(\"$0.get('Content-Range'')\")>] abstract ContentRange: string option\n\n        /// The MIME type of this content\n        [<Emit(\"$0.get('Content-Type')\")>] abstract ContentType: string option\n\n        /// The date and time that the message was sent (in \"HTTP-date\" format as defined by RFC 7231)\n        [<Emit(\"$0.get('Date')\")>] abstract Date: string option\n\n        /// An identifier for a specific version of a resource, often a message digest\n        [<Emit(\"$0.get('ETag')\")>] abstract ETag: string option\n\n        /// Gives the date/time after which the response is considered stale (in \"HTTP-date\" format as defined by RFC 7231)\n        [<Emit(\"$0.get('Expires')\")>] abstract Expires: string option\n\n        /// The last modified date for the requested object (in \"HTTP-date\" format as defined by RFC 7231)\n        [<Emit(\"$0.get('Last-Modified')\")>] abstract LastModified: string option\n\n        /// Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988\n        [<Emit(\"$0.get('Link')\")>] abstract Link: string option\n\n        /// Used in redirection, or when a new resource has been created.\n        [<Emit(\"$0.get('Location')\")>] abstract Location: string option\n\n        /// This field is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\".\n        [<Emit(\"$0.get('P3P')\")>] abstract P3P: string option\n\n        /// Implementation-specific fields that may have various effects anywhere along the request-response chain.\n        [<Emit(\"$0.get('Pragma')\")>] abstract Pragma: string option\n\n        /// Request authentication to access the proxy.\n        [<Emit(\"$0.get('Proxy-Authenticate')\")>] abstract ProxyAuthenticate: string option\n\n        /// HTTP Public Key Pinning, announces hash of website's authentic TLS certificate\n        [<Emit(\"$0.get('Public-Key-Pins')\")>] abstract PublicKeyPins: string option\n\n        /// Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.\n        [<Emit(\"$0.get('Refresh')\")>] abstract Refresh: string option\n\n        /// If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.\n        [<Emit(\"$0.get('Retry-After')\")>] abstract RetryAfter: string option\n\n        /// A name for the server\n        [<Emit(\"$0.get('Server')\")>] abstract Server: string option\n\n        /// An HTTP cookie\n        [<Emit(\"$0.get('Set-Cookie')\")>] abstract SetCookie: string option\n\n        /// CGI header field specifying the status of the HTTP response. Normal HTTP responses use a separate \"Status-Line\" instead, defined by RFC 7230\n        [<Emit(\"$0.get('Status')\")>] abstract Status: string option\n\n        /// A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.\n        [<Emit(\"$0.get('Strict-Transport-Security')\")>] abstract StrictTransportSecurity: string option\n\n        /// The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer coding.\n        [<Emit(\"$0.get('Trailer')\")>] abstract Trailer: string option\n\n        /// The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.\n        [<Emit(\"$0.get('Transfer-Encoding')\")>] abstract TransferEncoding: string option\n\n        /// Tracking Status Value, value suggested to be sent in response to a DNT(do-not-track)\n        [<Emit(\"$0.get('TSV')\")>] abstract TSV: string option\n\n        /// Ask the client to upgrade to another protocol.\n        [<Emit(\"$0.get('Upgrade')\")>] abstract Upgrade: string option\n\n        /// Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.\n        [<Emit(\"$0.get('Vary')\")>] abstract Vary: string option\n\n        /// Informs the client of proxies through which the response was sent.\n        [<Emit(\"$0.get('Via')\")>] abstract Via: string option\n\n        /// A general warning about possible problems with the entity body.\n        [<Emit(\"$0.get('Warning')\")>] abstract Warning: string option\n\n        /// Indicates the authentication scheme that should be used to access the requested entity.\n        [<Emit(\"$0.get('WWW-Authenticate')\")>] abstract WWWAuthenticate: string option\n\n        /// Clickjacking protection: deny - no rendering within a frame, sameorigin - no rendering if origin mismatch, allow-from - allow from specified location, allowall - non-standard, allow from any location\n        [<Emit(\"$0.get('X-Frame-Options')\")>] abstract XFrameOptions: string option\n\n        /// Cross-site scripting (XSS) filter\n        [<Emit(\"$0.get('X-XSS-Protection')\")>] abstract XXSSProtection: string option\n\n        /// Content Security Policy definition.\n        [<Emit(\"$0.get('Content-Security-Policy')\")>] abstract ContentSecurityPolicy: string option\n\n        /// The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type. This also applies to Google Chrome, when downloading extensions\n        [<Emit(\"$0.get('X-Content-Type-Options')\")>] abstract XContentTypeOptions: string option\n\n        /// Specifies the technology (e.g. ASP.NET, PHP, JBoss) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)\n        [<Emit(\"$0.get('X-Powered-By')\")>] abstract XPoweredBy: string option\n\n        /// Recommends the preferred rendering engine (often a backward-compatibility mode) to use to display the content. Also used to activate Chrome Frame in Internet Explorer.\n        [<Emit(\"$0.get('X-UA-Compatible')\")>] abstract XUACompatible: string option\n\n        /// Provide the duration of the audio or video in seconds; only supported by Gecko browsers\n        [<Emit(\"$0.get('X-Content-Duration')\")>] abstract XContentDuration: string option\n\n        /// Tells a server which (presumably in the middle of a HTTP -> HTTPS migration) hosts mixed content that the client would prefer redirection to HTTPS and can handle Content-Security-Policy: upgrade-insecure-requests\n        [<Emit(\"$0.get('Upgrade-Insecure-Requests')\")>] abstract UpgradeInsecureRequests: string option\n\n        /// Correlates HTTP requests between a client and server.\n        [<Emit(\"$0.get('X-Request-ID')\")>] abstract XRequestID: string option\n\n        /// Correlates HTTP requests between a client and server.\n        [<Emit(\"$0.get('X-Correlation-ID')\")>] abstract XCorrelationID: string option\n\n\n    and Response = //(?body: BodyInit, ?init: ResponseInit) =\n        inherit Body\n\n        /// Verifies that the fetch was successful\n        [<Emit(\"$0.ok\")>] abstract Ok: bool\n\n        /// Returns the HTTP status code\n        [<Emit(\"$0.status\")>] abstract Status: int\n\n        /// Returns the HTTP status message\n        [<Emit(\"$0.statusText\")>] abstract StatusText: string\n\n        /// Returns the response URL\n        [<Emit(\"$0.url\")>] abstract Url: string\n\n        /// Returns the headers objct\n        [<Emit(\"$0.headers\")>] abstract Headers : Headers\n\n    and [<StringEnum; RequireQualifiedAccess>] ResponseType =\n        | Basic | Cors | Default | Error | Opaque\n\n    and ResponseInit =\n        abstract status: float with get, set\n        abstract statusText: string option with get, set\n        abstract headers: HeaderInit option with get, set\n\n    and HeaderInit =\n        U2<Headers, ResizeArray<string>>\n\n    and BodyInit =\n        U3<Browser.Blob, Browser.FormData, string>\n\n    [<Erase; RequireQualifiedAccess; NoComparison>]\n    type RequestInfo =\n        /// Uses a simple Url as string to create the request info\n        | Url of string\n        /// Uses a Request object as request info\n        | Req of Request\n\n    type [<Erase>] GlobalFetch =\n        [<Global>]static member fetch (req: RequestInfo, ?init: RequestInit) = jsNative :JS.Promise<Response>\n\n    [<StringEnum; RequireQualifiedAccess>]\n    type HttpMethod =\n        | [<CompiledName(\"GET\")>] GET\n        | [<CompiledName(\"HEAD\")>] HEAD\n        | [<CompiledName(\"POST\")>] POST\n        | [<CompiledName(\"PUT\")>] PUT\n        | [<CompiledName(\"DELETE\")>] DELETE\n        | [<CompiledName(\"TRACE\")>] TRACE\n        | [<CompiledName(\"CONNECT\")>] CONNECT\n        | [<CompiledName(\"PATCH\")>] PATCH\n\n    type IHttpRequestHeaders =\n        interface end\n\n    [<KeyValueList>]\n    type HttpRequestHeaders =\n        | Accept of string\n        | [<CompiledName(\"Accept-Charset\")>] AcceptCharset of string\n        | [<CompiledName(\"Accept-Encoding\")>] AcceptEncoding of string\n        | [<CompiledName(\"Accept-Language\")>] AcceptLanguage of string\n        | [<CompiledName(\"Accept-Datetime\")>] AcceptDatetime of string\n        | Authorization of string\n        | [<CompiledName(\"Cache-Control\")>] CacheControl of string\n        | Connection of string\n        | Cookie of string\n        | [<CompiledName(\"Content-Length\")>] ContentLength of string\n        | [<CompiledName(\"Content-MD5\")>] ContentMD5 of string\n        | [<CompiledName(\"Content-Type\")>] ContentType of string\n        | Date of string\n        | Expect of string\n        | Forwarded of string\n        | From of string\n        | Host of string\n        | [<CompiledName(\"If-Match\")>] IfMatch of string\n        | [<CompiledName(\"If-Modified-Since\")>] IfModifiedSince of string\n        | [<CompiledName(\"If-None-Match\")>] IfNoneMatch of string\n        | [<CompiledName(\"If-Range\")>] IfRange of string\n        | [<CompiledName(\"If-Unmodified-Since\")>] IfUnmodifiedSince of string\n        | [<CompiledName(\"Max-Forwards\")>] MaxForwards of int\n        | Origin of string\n        | Pragma of string\n        | [<CompiledName(\"Proxy-Authorization\")>] ProxyAuthorization of string\n        | Range of string\n        | Referer of string\n        | [<CompiledName(\"SOAPAction\")>] SOAPAction of string\n        | [<CompiledName(\"TE\")>] TE of string\n        | [<CompiledName(\"User-Agent\")>] UserAgent of string\n        | Upgrade of string\n        | Via of string\n        | Warning of string\n        | [<CompiledName(\"X-Requested-With\")>] XRequestedWith of string\n        | [<CompiledName(\"DNT\")>] DNT of string\n        | [<CompiledName(\"X-Forwarded-For\")>] XForwardedFor of string\n        | [<CompiledName(\"X-Forwarded-Host\")>] XForwardedHost of string\n        | [<CompiledName(\"X-Forwarded-Proto\")>] XForwardedProto of string\n        | [<CompiledName(\"Front-End-Https\")>] FrontEndHttps of string\n        | [<CompiledName(\"X-Http-Method-Override\")>] XHttpMethodOverride of string\n        | [<CompiledName(\"X-ATT-DeviceId\")>] XATTDeviceId of string\n        | [<CompiledName(\"X-Wap-Profile\")>] XWapProfile of string\n        | [<CompiledName(\"Proxy-Connection\")>] ProxyConnection of string\n        | [<CompiledName(\"X-UIDH\")>] XUIDH of string\n        | [<CompiledName(\"X-Csrf-Token\")>] XCsrfToken of string\n        interface IHttpRequestHeaders\n\n    type IRequestProperties =\n        interface end\n\n    [<KeyValueList; NoComparison>]\n    type RequestProperties =\n        | Method of HttpMethod\n        | Headers of HttpRequestHeaders list\n        | Body of BodyInit\n        | Mode of RequestMode\n        | Credentials of RequestCredentials\n        | Cache of RequestCache\n        interface IRequestProperties\n\nopen Fetch_types\n\n\n/// Retrieves data from the specified resource.\nlet fetch (url: string) (init: RequestProperties list) : JS.Promise<Response> =\n    GlobalFetch.fetch(RequestInfo.Url url, unbox init)\n    |> Promise.map (fun response ->\n        if response.Ok then\n            response\n        else\n            // TODO maybe this should use the input URL rather than the response URL ?\n            // TODO this should probably throw a custom error type\n            failwith (string response.Status + \" \" + response.StatusText + \" for URL \" + response.Url))\n\n\nlet tryFetch (url: string) (init: RequestProperties list) : JS.Promise<Result<Response, Exception>> =\n    fetch url init |> Promise.result\n\n\n/// Retrieves data from the specified resource, parses the json and returns the data as an object of type 'T.\nlet [<PassGenerics>] fetchAs<'T> (url: string) (init: RequestProperties list) : JS.Promise<'T> =\n    fetch url init\n    |> Promise.bind (fun fetched -> fetched.text())\n    |> Promise.map ofJson<'T>\n\n\nlet [<PassGenerics>] tryFetchAs<'T> (url: string) (init: RequestProperties list) : JS.Promise<Result<'T, Exception>> =\n    fetchAs url init |> Promise.result\n\n\n/// Sends a HTTP post with the record serialized as JSON.\n/// This function already sets the HTTP Method to POST sets the json into the body.\nlet postRecord<'T> (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Response> =\n    let props =\n        JS.Object.assign(\n            [RequestProperties.Method HttpMethod.POST\n             RequestProperties.Headers [ContentType \"application/json\"]\n             RequestProperties.Body (unbox (toJson record))], properties)\n    fetch url (unbox props)\n\n\nlet tryPostRecord<'T> (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Result<Response, Exception>> =\n    postRecord url record properties |> Promise.result\n\n\n/// Sends a HTTP patch with the record serialized as JSON.\n/// This function already sets the HTTP Method to PATCH sets the json into the body.\nlet patchRecord<'T> (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Response> =\n    let props =\n        JS.Object.assign(\n            [RequestProperties.Method HttpMethod.PATCH\n             RequestProperties.Headers [ContentType \"application/json\"]\n             RequestProperties.Body (unbox (toJson record))], properties)\n    fetch url (unbox props)\n"]}