var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { setType } from "fable-core/Symbol";
import _Symbol from "fable-core/Symbol";
import { toString, compareUnions, equalsUnions } from "fable-core/Util";
import { getTypeFullName } from "fable-core/Reflection";
import { promiseSeq } from "./PromiseSeq/Extensions";
export var DBKeyMethod = function () {
    function DBKeyMethod(caseName, fields) {
        _classCallCheck(this, DBKeyMethod);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(DBKeyMethod, [{
        key: _Symbol.reflection,
        value: function value() {
            return {
                type: "Fable.PowerPack.Experimental.IndexedDB.DBKeyMethod",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    AutoIncrement: [],
                    KeyPath: ["string"]
                }
            };
        }
    }, {
        key: "Equals",
        value: function Equals(other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function CompareTo(other) {
            return compareUnions(this, other);
        }
    }]);

    return DBKeyMethod;
}();
setType("Fable.PowerPack.Experimental.IndexedDB.DBKeyMethod", DBKeyMethod);
export var DBCursorDirection = function () {
    function DBCursorDirection(caseName, fields) {
        _classCallCheck(this, DBCursorDirection);

        this.Case = caseName;
        this.Fields = fields;
    }

    _createClass(DBCursorDirection, [{
        key: _Symbol.reflection,
        value: function value() {
            return {
                type: "Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection",
                interfaces: ["FSharpUnion", "System.IEquatable", "System.IComparable"],
                cases: {
                    Next: [],
                    NextUnique: [],
                    Prev: [],
                    PrevUnique: []
                }
            };
        }
    }, {
        key: "Equals",
        value: function Equals(other) {
            return equalsUnions(this, other);
        }
    }, {
        key: "CompareTo",
        value: function CompareTo(other) {
            return compareUnions(this, other);
        }
    }, {
        key: "ToString",
        value: function ToString() {
            return this.Case === "NextUnique" ? "nextunique" : this.Case === "Prev" ? "prev" : this.Case === "PrevUnique" ? "prevunique" : "next";
        }
    }], [{
        key: "Default",
        get: function get() {
            return new DBCursorDirection("Next", []);
        }
    }]);

    return DBCursorDirection;
}();
setType("Fable.PowerPack.Experimental.IndexedDB.DBCursorDirection", DBCursorDirection);
export function createStore(keyMethod, db, _genArgs) {
    var args = {};

    if (keyMethod.Case === "AutoIncrement") {
        args.autoIncrement = true;
    } else {
        args.keyPath = keyMethod.Fields[0];
    }

    var storeName = getTypeFullName(_genArgs.T, "name");
    return db.createObjectStore(storeName, args);
}
export function deleteStore(db, _genArgs) {
    var storeName = getTypeFullName(_genArgs.T, "name");
    db.deleteObjectStore(storeName);
}
export function openCursor(index, keyCursor, range, direction, step) {
    var range_1 = range != null ? range : null;
    var direction_1 = toString(direction != null ? direction : DBCursorDirection.Default);
    var step_1 = step != null ? step : 1;
    var request = keyCursor ? index.openKeyCursor(range_1, direction_1) : index.openCursor(range_1, direction_1);

    var cursorSeq = function cursorSeq() {
        return function (builder_) {
            return builder_.Delay(function () {
                return builder_.Bind(new Promise(function (cont, _arg2) {
                    request.onsuccess = function (_arg1) {
                        request.onsuccess = null;

                        if (request.result) {
                            var cursor = request.result;
                            cont(cursor.value);
                            cursor.advance(step_1);
                        } else {
                            cont();
                        }

                        return null;
                    };
                }), function (_arg1) {
                    return _arg1 != null ? builder_.Combine(builder_.Yield(_arg1), builder_.Delay(function () {
                        return builder_.YieldFrom(cursorSeq());
                    })) : function () {
                        return builder_.Zero();
                    }();
                });
            });
        }(promiseSeq);
    };

    return cursorSeq();
}
export function countAllAsync(x) {
    return new Promise(function (cont, econt) {
        var request = x.count();

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}
export function countKeyAsync(indexKey, x) {
    return new Promise(function (cont, econt) {
        var request = x.count(indexKey);

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}
export function countRangeAsync(indexKeyRange, x) {
    return new Promise(function (cont, econt) {
        var request = x.count(indexKeyRange);

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}
export function getAsync(indexKey, x) {
    return new Promise(function (cont, econt) {
        var request = x.get(indexKey);

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}
export function getFirstAsync(indexKeyRange, x) {
    return new Promise(function (cont, econt) {
        var request = x.get(indexKeyRange);

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}
export function getKeyAsync(indexKey, x) {
    return new Promise(function (cont, econt) {
        var request = x.getKey(indexKey);

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}
export function getKeyFirstAsync(indexKeyRange, x) {
    return new Promise(function (cont, econt) {
        var request = x.getKey(indexKeyRange);

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}

function IDBObjectStore_getAsync(key) {
    var _this = this;

    return new Promise(function (cont, econt) {
        var request = _this.get(key);

        request.onerror = function (_arg1) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg2) {
            return cont(request.result);
        };
    });
}

export { IDBObjectStore_getAsync as IDBObjectStore$2E$getAsync };

function IDBObjectStore_openCursorAsync(range, direction, step) {
    return openCursor(this, false, range, direction, step);
}

export { IDBObjectStore_openCursorAsync as IDBObjectStore$2E$openCursorAsync };

function IDBObjectStore_addAsync(item) {
    var _this2 = this;

    return new Promise(function (cont, econt) {
        var request = _this2.add(item);

        request.onerror = function (_arg3) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg4) {
            return cont(request.result);
        };
    });
}

export { IDBObjectStore_addAsync as IDBObjectStore$2E$addAsync };

function IDBObjectStore_deleteAsync(key) {
    var _this3 = this;

    return new Promise(function (cont, econt) {
        var request = _this3.delete(key);

        request.onerror = function (_arg5) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg6) {
            return cont();
        };
    });
}

export { IDBObjectStore_deleteAsync as IDBObjectStore$2E$deleteAsync };

function IDBObjectStore_clearAsync() {
    var _this4 = this;

    return new Promise(function (cont, econt) {
        var request = _this4.clear();

        request.onerror = function (_arg7) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg8) {
            return cont();
        };
    });
}

export { IDBObjectStore_clearAsync as IDBObjectStore$2E$clearAsync };

function IDBObjectStore_putAsync(item) {
    var _this5 = this;

    return new Promise(function (cont, econt) {
        var request = _this5.put(item);

        request.onerror = function (_arg9) {
            return econt(new Error(request.error.name));
        };

        request.onsuccess = function (_arg10) {
            return cont(request.result);
        };
    });
}

export { IDBObjectStore_putAsync as IDBObjectStore$2E$putAsync };
export var IndexedDB = function () {
    _createClass(IndexedDB, [{
        key: _Symbol.reflection,
        value: function value() {
            return {
                type: "Fable.PowerPack.Experimental.IndexedDB.IndexedDB",
                properties: {}
            };
        }
    }]);

    function IndexedDB() {
        _classCallCheck(this, IndexedDB);
    }

    _createClass(IndexedDB, [{
        key: "DeleteDatabase",
        value: function DeleteDatabase(_genArgs) {
            return new Promise(function (cont, econt) {
                var name = getTypeFullName(_genArgs.T, "name");
                var request = indexedDB.deleteDatabase(name);

                request.onerror = function (_arg11) {
                    return econt(new Error(request.error.name));
                };

                request.onsuccess = function (_arg12) {
                    return cont();
                };
            });
        }
    }, {
        key: "Use",
        value: function Use(mkTransaction, execTransaction, _genArgs) {
            return new Promise(function (cont, econt) {
                var impl = new _genArgs.T();
                var name = getTypeFullName(_genArgs.T, "name");
                var request = indexedDB.open(name, impl.Version);

                request.onerror = function (_arg13) {
                    econt(new Error(request.error.name));
                    return null;
                };

                request.onupgradeneeded = function (ev) {
                    try {
                        var db = request.result;
                        impl.Upgrade(db);
                    } catch (e) {
                        econt(e);
                    }

                    return null;
                };

                request.onsuccess = function (_arg16) {
                    try {
                        var db = request.result;
                        var trans = mkTransaction(db);
                        execTransaction(trans).then(function (res) {
                            trans.oncomplete = function (_arg14) {
                                db.close();
                                return cont(res);
                            };

                            trans.onerror = function (_arg15) {
                                db.close();
                                return econt(new Error(trans.error.name));
                            };
                        }).catch(econt);
                    } catch (e) {
                        econt(e);
                    }

                    return null;
                };
            });
        }
    }, {
        key: "UseStoreReadOnly1",
        value: function UseStoreReadOnly1(transaction, _genArgs) {
            var _this6 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction(storeName1, "readonly");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                return transaction(store1);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this6.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }, {
        key: "UseStoreReadOnly2",
        value: function UseStoreReadOnly2(transaction, _genArgs) {
            var _this7 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");
            var storeName2 = getTypeFullName(_genArgs.S2, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction([storeName1, storeName2], "readonly");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                var store2 = trans.objectStore(storeName2);
                return transaction(store1)(store2);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this7.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }, {
        key: "UseStoreReadOnly3",
        value: function UseStoreReadOnly3(transaction, _genArgs) {
            var _this8 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");
            var storeName2 = getTypeFullName(_genArgs.S2, "name");
            var storeName3 = getTypeFullName(_genArgs.S3, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction([storeName1, storeName2, storeName3], "readonly");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                var store2 = trans.objectStore(storeName2);
                var store3 = trans.objectStore(storeName3);
                return transaction(store1)(store2)(store3);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this8.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }, {
        key: "UseStoreReadOnly4",
        value: function UseStoreReadOnly4(transaction, _genArgs) {
            var _this9 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");
            var storeName2 = getTypeFullName(_genArgs.S2, "name");
            var storeName3 = getTypeFullName(_genArgs.S3, "name");
            var storeName4 = getTypeFullName(_genArgs.S4, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction([storeName1, storeName2, storeName3, storeName4], "readonly");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                var store2 = trans.objectStore(storeName2);
                var store3 = trans.objectStore(storeName3);
                var store4 = trans.objectStore(storeName4);
                return transaction(store1)(store2)(store3)(store4);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this9.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }, {
        key: "UseStoreReadWrite1",
        value: function UseStoreReadWrite1(transaction, _genArgs) {
            var _this10 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction(storeName1, "readwrite");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                return transaction(store1);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this10.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }, {
        key: "UseStoreReadWrite2",
        value: function UseStoreReadWrite2(transaction, _genArgs) {
            var _this11 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");
            var storeName2 = getTypeFullName(_genArgs.S2, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction([storeName1, storeName2], "readwrite");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                var store2 = trans.objectStore(storeName2);
                return transaction(store1)(store2);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this11.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }, {
        key: "UseStoreReadWrite3",
        value: function UseStoreReadWrite3(transaction, _genArgs) {
            var _this12 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");
            var storeName2 = getTypeFullName(_genArgs.S2, "name");
            var storeName3 = getTypeFullName(_genArgs.S3, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction([storeName1, storeName2, storeName3], "readwrite");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                var store2 = trans.objectStore(storeName2);
                var store3 = trans.objectStore(storeName3);
                return transaction(store1)(store2)(store3);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this12.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }, {
        key: "UseStoreReadWrite4",
        value: function UseStoreReadWrite4(transaction, _genArgs) {
            var _this13 = this;

            var storeName1 = getTypeFullName(_genArgs.S1, "name");
            var storeName2 = getTypeFullName(_genArgs.S2, "name");
            var storeName3 = getTypeFullName(_genArgs.S3, "name");
            var storeName4 = getTypeFullName(_genArgs.S4, "name");

            var mkTransaction = function mkTransaction(db) {
                return db.transaction([storeName1, storeName2, storeName3, storeName4], "readwrite");
            };

            var execTransaction = function execTransaction(trans) {
                var store1 = trans.objectStore(storeName1);
                var store2 = trans.objectStore(storeName2);
                var store3 = trans.objectStore(storeName3);
                var store4 = trans.objectStore(storeName4);
                return transaction(store1)(store2)(store3)(store4);
            };

            return function (arg00) {
                return function (arg10) {
                    return _this13.Use(arg00, arg10, {
                        T: _genArgs.T,
                        Result: _genArgs.Result
                    });
                };
            }(mkTransaction)(execTransaction);
        }
    }]);

    return IndexedDB;
}();
setType("Fable.PowerPack.Experimental.IndexedDB.IndexedDB", IndexedDB);
//# sourceMappingURL=IndexedDB.js.map